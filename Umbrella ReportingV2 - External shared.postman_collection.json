{
	"info": {
		"_postman_id": "a1e8eb67-9882-4c42-91ff-abb7f4c03247",
		"name": "Umbrella ReportingV2 - External shared",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5663428"
	},
	"item": [
		{
			"name": "1. Auth",
			"item": [
				{
					"name": "Get Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"console.log('access_token = ', jsonData.access_token)",
									"var fromTimeConverted = new Date('May 25, 2022 01:00:00').getTime()",
									"var untilTimeConverted = new Date('June 25, 2022 01:00:00').getTime()",
									"postman.setEnvironmentVariable(\"fromTimestamp\", fromTimeConverted);",
									"postman.setEnvironmentVariable(\"untilTimestamp\", untilTimeConverted);",
									"console.log('fromTimeConverted =', fromTimeConverted)",
									"console.log('fromTimeConverted =', untilTimeConverted)",
									"postman.setEnvironmentVariable(\"AccessToken\", jsonData.access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthAPIToken}}"
							}
						],
						"url": {
							"raw": "{{Authurl}}",
							"host": [
								"{{Authurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate_time_stamps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var fromTimeConverted = new Date('May 8, 2022 01:00:00').getTime()",
									"var untilTimeConverted = new Date('June 9, 2022 01:00:00').getTime()",
									"postman.setEnvironmentVariable(\"fromTimestamp\", fromTimeConverted);",
									"postman.setEnvironmentVariable(\"untilTimestamp\", untilTimeConverted);",
									"console.log('fromTimeConverted =', fromTimeConverted)",
									"console.log('fromTimeConverted =', untilTimeConverted)",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthAPIToken}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{Authurl}}",
							"host": [
								"{{Authurl}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "First get your access token"
		},
		{
			"name": "2. Reporting",
			"item": [
				{
					"name": "1. Activity",
					"item": [
						{
							"name": "All Activity",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/activity?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=1&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"activity"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DNS Activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */",
											"var template = `",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">",
											"<div class=\"row\">",
											"    <div class=\"col\">",
											"        <div class=\"card card-body\">",
											"            <!-- <Input id=\"domTextElement\" onchange=\"fn1()\" class=\"form-control\" type=\"text\"> -->",
											"                <Input id=\"search-input\"  class=\"form-control\" type=\"text\">",
											"        </div>",
											"        <h4><span> The amount of filtered logs: <span id=\"entries-counter\"></span></span></h4>",
											"    </div>",
											"<div id=\"table\"></div>",
											"<style>",
											"    thead {",
											"      background-color: #F5F5F5;",
											"      border",
											"    } ",
											"    th, th:first-child, th:last-child, td, td:first-child, td:last-child {",
											"        padding: 12px 15px;",
											"    }",
											"    th {",
											"        text-transform: uppercase;",
											"    }",
											"    td {",
											"        color: #676769;",
											"    }",
											"    tbody tr:nth-child(odd) {",
											"        background-color: white;",
											"        transition: 0.3s;",
											"    }",
											"    tbody tr:nth-child(even) {",
											"        background-color: #F5F5F5;",
											"        transition: 0.3s;",
											"    }",
											"    tbody tr:hover {",
											"        filter: brightness(90%);",
											"    }",
											"    .api {",
											"        cursor: pointer;",
											"    }",
											"    .api:active {",
											"        color: #202128;",
											"    }",
											"</style>",
											"<script>",
											"    let results = {{{results}}};",
											"    const headers = {{{headers}}};",
											"    // console.log(\"results = \", {{{results}}})",
											"        $('#search-input').on('keyup', function () {",
											"            var value = $(this).val()",
											"            ",
											"            var data = searchTable(results, value)",
											"            document.getElementById(\"entries-counter\").innerHTML = data.length",
											"            document.getElementById('table').innerHTML= ''",
											"            // console.log(data);",
											"            buildeTable(data)",
											"            // searchTable(results, value)",
											"        })",
											"        document.getElementById(\"entries-counter\").innerHTML = results.length",
											"        buildeTable(results);",
											"",
											"\t\tfunction searchTable(results, str) {",
											"            let filteredData = []",
											"            filteredData = results.filter(element => {",
											"                // console.log(\"element being searched = \", element)",
											"                let check_resutl = element.map(el => el.toString().toLowerCase().search(str.toLowerCase()))",
											"                const c = check_resutl.some(e => e !== -1)",
											"                if (c) {",
											"                    return true;",
											"                }",
											"            });",
											"            // console.log(\"filteredData = \", filteredData)",
											"            return filteredData",
											"        }",
											"",
											"        function buildeTable(results) {",
											"            // results = (fn1().length === 0)? results: fn1();",
											"            // console.log(\"results =\", results)",
											"            var table = d3.select(\"#table\").append(\"table\");",
											"            var header = table.append(\"thead\").append(\"tr\");",
											"            table.innerHTML = ''",
											"            header",
											"                .selectAll(\"th\")",
											"                .data(headers)",
											"                .enter()",
											"                .append(\"th\")",
											"                .text(function (d) {",
											"                    return d;",
											"                });",
											"            var tablebody = table.append(\"tbody\");",
											"            rows = tablebody",
											"                .selectAll(\"tr\")",
											"                .data(results)",
											"                .enter()",
											"                .append(\"tr\");",
											"",
											"            // each row has its own array, so here we enter it into the cells",
											"            cells = rows.selectAll(\"td\")",
											"                .data(function (d) {",
											"                    return d;",
											"                })",
											"                .enter()",
											"                .append(\"td\")",
											"                .text(function (d) {",
											"                    return d;",
											"                })",
											"                .filter(function (d) {",
											"                    return isEndpoint(d)",
											"                })",
											"                .attr('onclick', function (d) {",
											"                    return 'copy(\\\"' + d + '\\\")'",
											"                })",
											"                .attr('class', 'api');",
											"",
											"            function copy(text) {",
											"                const el = document.createElement('textarea');",
											"                el.value = text;",
											"                el.style = {",
											"                    display: 'none'",
											"                };",
											"                document.body.append(el);",
											"                el.select();",
											"                document.execCommand('copy');",
											"                document.body.removeChild(el);",
											"            }",
											"",
											"            function isEndpoint(url) {",
											"                const host = '{{host}}'",
											"                return url.toString().indexOf(host) !== -1",
											"            }",
											"",
											"        }",
											"",
											"        // results = (fn1().length === 0)? results: fn1();",
											"        // console.log(\"results =\", results)",
											"    </script>`;",
											"",
											"// Host checks for nested API endpoints and makes them copyable-on-click",
											"const host = pm.request.url.host.join(\".\");",
											"const response = pm.response.json();",
											"",
											"/* DATA PARSING */",
											"function parseData(response, host) {",
											"  // Row data passed in as array of arrays (ex. [[name1, api1], [name2, api2], ...])",
											"  ",
											"  const results = response.data.map(obj =>",
											"    {",
											"        let humanReadable = new Date(obj['timestamp']);",
											"        return [",
											"            obj['externalip'],",
											"            obj['internalip'],",
											"            JSON.stringify(obj['policycategories']),",
											"            // JSON.stringify(obj['categories']),",
											"            (obj['categories'].length > 0)? obj['categories'].map(el => el[\"label\"]):[],",
											"            obj['verdict'],",
											"            obj['domain'],",
											"            humanReadable,",
											"            // JSON.stringify(obj['identities']),",
											"            // [{\"id\":579739659,\"type\":{\"id\":34,\"type\":\"anyconnect\",\"label\":\"Anyconnect Roaming Client\"},\"label\":\"win10-2-calo\",\"deleted\":false}]",
											"            (obj['identities'].length)?(!obj['identities'][0][\"deleted\"])?obj['identities'][0][\"label\"] +\", \" + obj['identities'][0][\"type\"][\"label\"]:obj['identities'][0][\"label\"] +\", \" + obj['identities'][0][\"type\"][\"label\"]+ \", Deleted\":[],",
											"            JSON.stringify(obj['threats']),",
											"            JSON.stringify(obj['allapplications']),",
											"            obj['type']",
											"        ]",
											"    }",
											"    );",
											"",
											"  // Table Headers passed in as array of strings (ex. [\"Name\", \"Link\", ...])",
											"  const headers = ['externalip', 'internalip', 'policycategories', 'categories', 'verdict', 'domain', 'timestamp', 'identities', 'threats', 'allapplications', 'type'];",
											"  ",
											"  return [results, headers]",
											"}",
											"function myFunction() {",
											"  // Declare variables",
											"  var input, filter, table, tr, td, i, txtValue;",
											"  input = document.getElementById(\"myInput\");",
											"  filter = input.value.toUpperCase();",
											"  table = document.getElementById(\"myTable\");",
											"  tr = table.getElementsByTagName(\"tr\");",
											"",
											"  // Loop through all table rows, and hide those who don't match the search query",
											"  for (i = 0; i < tr.length; i++) {",
											"    td = tr[i].getElementsByTagName(\"td\")[0];",
											"    if (td) {",
											"      txtValue = td.textContent || td.innerText;",
											"      if (txtValue.toUpperCase().indexOf(filter) > -1) {",
											"        tr[i].style.display = \"\";",
											"      } else {",
											"        tr[i].style.display = \"none\";",
											"      }",
											"    }",
											"  }",
											"}",
											"/* FEED DATA INTO TEMPLATE */",
											"pm.visualizer.set(template, {",
											"  // Template will receive stringified JSON",
											"  results: JSON.stringify(parseData(response)[0]),",
											"  headers: JSON.stringify(parseData(response)[1]),",
											"  host",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/activity/dns?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=10&offset=0&identityids=1139281353",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"activity",
										"dns"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "domains",
											"value": "reddit.com,google.com",
											"disabled": true
										},
										{
											"key": "identityids",
											"value": "1139281353"
										},
										{
											"key": "domains",
											"value": "www.apple.com",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Proxy Activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */\r",
											"var template = `\r",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>\r",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\r",
											"<div class=\"row\">\r",
											"    <div class=\"col\">\r",
											"        <div class=\"card card-body\">\r",
											"            <!-- <Input id=\"domTextElement\" onchange=\"fn1()\" class=\"form-control\" type=\"text\"> -->\r",
											"                <Input id=\"search-input\"  class=\"form-control\" type=\"text\">\r",
											"        </div>\r",
											"        <h4><span> The amount of filtered logs: <span id=\"entries-counter\"></span></span></h4>\r",
											"    </div>\r",
											"<div id=\"table\"></div>\r",
											"<style>\r",
											"    thead {\r",
											"      background-color: #F5F5F5;\r",
											"      border\r",
											"    } \r",
											"    th, th:first-child, th:last-child, td, td:first-child, td:last-child {\r",
											"        padding: 12px 15px;\r",
											"    }\r",
											"    th {\r",
											"        text-transform: uppercase;\r",
											"    }\r",
											"    td {\r",
											"        color: #676769;\r",
											"    }\r",
											"    tbody tr:nth-child(odd) {\r",
											"        background-color: white;\r",
											"        transition: 0.3s;\r",
											"    }\r",
											"    tbody tr:nth-child(even) {\r",
											"        background-color: #F5F5F5;\r",
											"        transition: 0.3s;\r",
											"    }\r",
											"    tbody tr:hover {\r",
											"        filter: brightness(90%);\r",
											"    }\r",
											"    .api {\r",
											"        cursor: pointer;\r",
											"    }\r",
											"    .api:active {\r",
											"        color: #202128;\r",
											"    }\r",
											"</style>\r",
											"<script>\r",
											"    let results = {{{results}}};\r",
											"    const headers = {{{headers}}};\r",
											"   \r",
											"        $('#search-input').on('keyup', function () {\r",
											"            var value = $(this).val()\r",
											"            // console.log(\"Value = \", value)\r",
											"            var data = searchTable(results, value)\r",
											"            document.getElementById(\"entries-counter\").innerHTML = data.length\r",
											"            document.getElementById('table').innerHTML= ''\r",
											"            // console.log(data);\r",
											"            buildeTable(data)\r",
											"            // searchTable(results, value)\r",
											"        })\r",
											"        document.getElementById(\"entries-counter\").innerHTML = results.length\r",
											"        buildeTable(results);\r",
											"\r",
											"\t\tfunction searchTable(results, str) {\r",
											"            let filteredData = []\r",
											"            filteredData = results.filter(element => {\r",
											"                // console.log(\"element being searched = \", element)\r",
											"                let check_resutl = element.map(el => \r",
											"                {\r",
											"                    console.log('el=',el)\r",
											"                    console.log('searched word=', str)\r",
											"                    console.log('typeof el=',typeof(el))\r",
											"                    return (el)?el.toString().toLowerCase().search(str):-1;\r",
											"                    //return el.toString().toLowerCase().search(str);\r",
											"                }\r",
											"\r",
											"                )\r",
											"                console.log('check_resutl = ',check_resutl )\r",
											"                const c = check_resutl.some(e => e !== -1)\r",
											"                if (c) {\r",
											"                    return true;\r",
											"                }\r",
											"            });\r",
											"            console.log(\"filteredData = \", filteredData)\r",
											"            return filteredData\r",
											"        }\r",
											"\r",
											"        function buildeTable(results) {\r",
											"            // results = (fn1().length === 0)? results: fn1();\r",
											"            // console.log(\"results =\", results)\r",
											"            var table = d3.select(\"#table\").append(\"table\");\r",
											"            var header = table.append(\"thead\").append(\"tr\");\r",
											"            table.innerHTML = ''\r",
											"            header\r",
											"                .selectAll(\"th\")\r",
											"                .data(headers)\r",
											"                .enter()\r",
											"                .append(\"th\")\r",
											"                .text(function (d) {\r",
											"                    return d;\r",
											"                });\r",
											"            var tablebody = table.append(\"tbody\");\r",
											"            rows = tablebody\r",
											"                .selectAll(\"tr\")\r",
											"                .data(results)\r",
											"                .enter()\r",
											"                .append(\"tr\");\r",
											"\r",
											"            // each row has its own array, so here we enter it into the cells\r",
											"            cells = rows.selectAll(\"td\")\r",
											"                .data(function (d) {\r",
											"                    return d;\r",
											"                })\r",
											"                .enter()\r",
											"                .append(\"td\")\r",
											"                .text(function (d) {\r",
											"                    return d;\r",
											"                })\r",
											"                .filter(function (d) {\r",
											"                    return isEndpoint(d)\r",
											"                })\r",
											"                .attr('onclick', function (d) {\r",
											"                    return 'copy(\\\"' + d + '\\\")'\r",
											"                })\r",
											"                .attr('class', 'api');\r",
											"\r",
											"            function copy(text) {\r",
											"                const el = document.createElement('textarea');\r",
											"                el.value = text;\r",
											"                el.style = {\r",
											"                    display: 'none'\r",
											"                };\r",
											"                document.body.append(el);\r",
											"                el.select();\r",
											"                document.execCommand('copy');\r",
											"                document.body.removeChild(el);\r",
											"            }\r",
											"\r",
											"            function isEndpoint(value) {\r",
											"                const host = '{{host}}'\r",
											"                //console.log('value=', value)\r",
											"                return (value)?value.toString().indexOf(host) !== -1:\"null\".toString().indexOf(host) !== -1\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"        // results = (fn1().length === 0)? results: fn1();\r",
											"        // console.log(\"results =\", results)\r",
											"    </script>`;\r",
											"\r",
											"// Host checks for nested API endpoints and makes them copyable-on-click\r",
											"const host = pm.request.url.host.join(\".\");\r",
											"const response = pm.response.json();\r",
											"\r",
											"/* DATA PARSING */\r",
											"function parseData(response, host) {\r",
											"  // Row data passed in as array of arrays (ex. [[name1, api1], [name2, api2], ...])\r",
											"  const results = response.data.map(obj => \r",
											"    [\r",
											"      obj.destinationip, \r",
											"      obj.externalip, \r",
											"      obj.responsesize, \r",
											"      obj.date, \r",
											"      (obj.allapplications.length > 0)? obj.allapplications[0].label:\"\", \r",
											"      obj.internalip, \r",
											"      obj.referer,\r",
											"      obj.contenttype,\r",
											"      obj.tenantcontrols,\r",
											"      obj.securityoverridden,\r",
											"      obj.useragent,\r",
											"    ]\r",
											"    );\r",
											"\r",
											"  // Table Headers passed in as array of strings (ex. [\"Name\", \"Link\", ...])\r",
											"  const headers = [\r",
											"    \"destinationip\", \r",
											"    \"externalip\", \r",
											"    \"responsesize\", \r",
											"    \"date\", \r",
											"    \"Application\", \r",
											"    \"internalip\", \r",
											"    \"referer\", \r",
											"    \"contenttype\", \r",
											"    \"tenantcontrols\", \r",
											"    \"securityoverridden\", \r",
											"    \"useragent\"\r",
											"  ];\r",
											"  \r",
											"  return [results, headers]\r",
											"}\r",
											"function myFunction() {\r",
											"  // Declare variables\r",
											"  var input, filter, table, tr, td, i, txtValue;\r",
											"  input = document.getElementById(\"myInput\");\r",
											"  filter = input.value.toUpperCase();\r",
											"  table = document.getElementById(\"myTable\");\r",
											"  tr = table.getElementsByTagName(\"tr\");\r",
											"\r",
											"  // Loop through all table rows, and hide those who don't match the search query\r",
											"  for (i = 0; i < tr.length; i++) {\r",
											"    td = tr[i].getElementsByTagName(\"td\")[0];\r",
											"    if (td) {\r",
											"      txtValue = td.textContent || td.innerText;\r",
											"      if (txtValue.toUpperCase().indexOf(filter) > -1) {\r",
											"        tr[i].style.display = \"\";\r",
											"      } else {\r",
											"        tr[i].style.display = \"none\";\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"/* FEED DATA INTO TEMPLATE */\r",
											"pm.visualizer.set(template, {\r",
											"  // Template will receive stringified JSON\r",
											"  results: JSON.stringify(parseData(response)[0]),\r",
											"  headers: JSON.stringify(parseData(response)[1]),\r",
											"  host\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/activity/proxy?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"activity",
										"proxy"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Firewall Activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */",
											"var template = `",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">",
											"<div class=\"row\">",
											"    <div class=\"col\">",
											"        <div class=\"card card-body\">",
											"            <!-- <Input id=\"domTextElement\" onchange=\"fn1()\" class=\"form-control\" type=\"text\"> -->",
											"                <Input id=\"search-input\"  class=\"form-control\" type=\"text\">",
											"        </div>",
											"        <h4><span> The amount of filtered logs: <span id=\"entries-counter\"></span></span></h4>",
											"    </div>",
											"<div id=\"table\"></div>",
											"<style>",
											"    thead {",
											"      background-color: #F5F5F5;",
											"      border",
											"    } ",
											"    th, th:first-child, th:last-child, td, td:first-child, td:last-child {",
											"        padding: 12px 15px;",
											"    }",
											"    th {",
											"        text-transform: uppercase;",
											"    }",
											"    td {",
											"        color: #676769;",
											"    }",
											"    tbody tr:nth-child(odd) {",
											"        background-color: white;",
											"        transition: 0.3s;",
											"    }",
											"    tbody tr:nth-child(even) {",
											"        background-color: #F5F5F5;",
											"        transition: 0.3s;",
											"    }",
											"    tbody tr:hover {",
											"        filter: brightness(90%);",
											"    }",
											"    .api {",
											"        cursor: pointer;",
											"    }",
											"    .api:active {",
											"        color: #202128;",
											"    }",
											"</style>",
											"<script>",
											"    let results = {{{results}}};",
											"    const headers = {{{headers}}};",
											"   ",
											"        $('#search-input').on('keyup', function () {",
											"            var value = $(this).val()",
											"            // console.log(\"Value = \", value)",
											"            var data = searchTable(results, value)",
											"            document.getElementById(\"entries-counter\").innerHTML = data.length",
											"            document.getElementById('table').innerHTML= ''",
											"            // console.log(data);",
											"            buildeTable(data)",
											"            // searchTable(results, value)",
											"        })",
											"        document.getElementById(\"entries-counter\").innerHTML = results.length",
											"        buildeTable(results);",
											"",
											"\t\tfunction searchTable(results, str) {",
											"            let filteredData = []",
											"            filteredData = results.filter(element => {",
											"                // console.log(\"element being searched = \", element)",
											"                let check_resutl = element.map(el => el.toLowerCase().search(str.toLowerCase()))",
											"                const c = check_resutl.some(e => e !== -1)",
											"                if (c) {",
											"                    return true;",
											"                }",
											"            });",
											"            // console.log(\"filteredData = \", filteredData)",
											"            return filteredData",
											"        }",
											"",
											"        function buildeTable(results) {",
											"            // results = (fn1().length === 0)? results: fn1();",
											"            // console.log(\"results =\", results)",
											"            var table = d3.select(\"#table\").append(\"table\");",
											"            var header = table.append(\"thead\").append(\"tr\");",
											"            table.innerHTML = ''",
											"            header",
											"                .selectAll(\"th\")",
											"                .data(headers)",
											"                .enter()",
											"                .append(\"th\")",
											"                .text(function (d) {",
											"                    return d;",
											"                });",
											"            var tablebody = table.append(\"tbody\");",
											"            rows = tablebody",
											"                .selectAll(\"tr\")",
											"                .data(results)",
											"                .enter()",
											"                .append(\"tr\");",
											"",
											"            // each row has its own array, so here we enter it into the cells",
											"            cells = rows.selectAll(\"td\")",
											"                .data(function (d) {",
											"                    return d;",
											"                })",
											"                .enter()",
											"                .append(\"td\")",
											"                .text(function (d) {",
											"                    return d;",
											"                })",
											"                .filter(function (d) {",
											"                    return isEndpoint(d)",
											"                })",
											"                .attr('onclick', function (d) {",
											"                    return 'copy(\\\"' + d + '\\\")'",
											"                })",
											"                .attr('class', 'api');",
											"",
											"            function copy(text) {",
											"                const el = document.createElement('textarea');",
											"                el.value = text;",
											"                el.style = {",
											"                    display: 'none'",
											"                };",
											"                document.body.append(el);",
											"                el.select();",
											"                document.execCommand('copy');",
											"                document.body.removeChild(el);",
											"            }",
											"",
											"            function isEndpoint(url) {",
											"                const host = '{{host}}'",
											"                return url.toString().indexOf(host) !== -1",
											"            }",
											"",
											"        }",
											"",
											"        // results = (fn1().length === 0)? results: fn1();",
											"        // console.log(\"results =\", results)",
											"    </script>`;",
											"",
											"// Host checks for nested API endpoints and makes them copyable-on-click",
											"const host = pm.request.url.host.join(\".\");",
											"const response = pm.response.json();",
											"",
											"/* DATA PARSING */",
											"function parseData(response, host) {",
											"  // Row data passed in as array of arrays (ex. [[name1, api1], [name2, api2], ...])",
											"  const results = response.data.map(obj => ",
											"    [",
											"      obj.identities[0].label + \"/\" + obj.identities[0].id, ",
											"      obj.sourceip + \":\" + obj.sourceport, ",
											"      obj.destinationip + \":\" + obj.destinationport, ",
											"      obj.verdict, ",
											"      (obj.allapplications.length > 0)? obj.allapplications[0].label:\"\", ",
											"      obj.protocol.label, ",
											"      obj.rule.label,",
											"      (obj.allapplications.length > 0)? obj.allapplications[0].category.label:\"\",",
											"      (obj.applicationprotocols.length > 0)? obj.applicationprotocols[0].label:\"\",",
											"      obj.date,",
											"      obj.time,",
											"    ]",
											"    );",
											"",
											"  // Table Headers passed in as array of strings (ex. [\"Name\", \"Link\", ...])",
											"  const headers = [",
											"    \"Identity/ID\", ",
											"    \"Source IP\", ",
											"    \"Destination IP\", ",
											"    \"Action\", ",
											"    \"Application\", ",
											"    \"Protocol\", ",
											"    \"Ruleset or Rule\", ",
											"    \"Application Category\", ",
											"    \"Application Protocol\", ",
											"    \"Date\", ",
											"    \"time\"",
											"  ];",
											"  ",
											"  return [results, headers]",
											"}",
											"function myFunction() {",
											"  // Declare variables",
											"  var input, filter, table, tr, td, i, txtValue;",
											"  input = document.getElementById(\"myInput\");",
											"  filter = input.value.toUpperCase();",
											"  table = document.getElementById(\"myTable\");",
											"  tr = table.getElementsByTagName(\"tr\");",
											"",
											"  // Loop through all table rows, and hide those who don't match the search query",
											"  for (i = 0; i < tr.length; i++) {",
											"    td = tr[i].getElementsByTagName(\"td\")[0];",
											"    if (td) {",
											"      txtValue = td.textContent || td.innerText;",
											"      if (txtValue.toUpperCase().indexOf(filter) > -1) {",
											"        tr[i].style.display = \"\";",
											"      } else {",
											"        tr[i].style.display = \"none\";",
											"      }",
											"    }",
											"  }",
											"}",
											"/* FEED DATA INTO TEMPLATE */",
											"pm.visualizer.set(template, {",
											"  // Template will receive stringified JSON",
											"  results: JSON.stringify(parseData(response)[0]),",
											"  headers: JSON.stringify(parseData(response)[1]),",
											"  host",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/activity/firewall?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0&ports=443",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"activity",
										"firewall"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "ports",
											"value": "443"
										},
										{
											"key": "sourceip",
											"value": "10.10.104.18",
											"disabled": true
										},
										{
											"key": "protocol",
											"value": "TCP",
											"disabled": true
										},
										{
											"key": "nbarapplicationtypeids",
											"value": "32,56,33,55,101,50,53,100",
											"description": "application filter",
											"disabled": true
										},
										{
											"key": "verdict",
											"value": "allowed,blocked",
											"disabled": true
										},
										{
											"key": "filternoisydomains",
											"value": "true",
											"disabled": true
										},
										{
											"key": "order",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "identityids",
											"value": "577174332",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "oauth2",
						"oauth2": [
							{
								"key": "addTokenTo",
								"value": "header",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "2. Top Identities",
					"item": [
						{
							"name": "Top Identities All",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */",
											"var template = `",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">",
											"<div class=\"row\">",
											"    <div class=\"col\">",
											"        <div class=\"card card-body\">",
											"            <!-- <Input id=\"domTextElement\" onchange=\"fn1()\" class=\"form-control\" type=\"text\"> -->",
											"                <Input id=\"search-input\"  class=\"form-control\" type=\"text\">",
											"        </div>",
											"        <h4><span> The amount of filtered logs: <span id=\"entries-counter\"></span></span></h4>",
											"    </div>",
											"<div id=\"table\"></div>",
											"<style>",
											"    thead {",
											"      background-color: #F5F5F5;",
											"      border",
											"    } ",
											"    th, th:first-child, th:last-child, td, td:first-child, td:last-child {",
											"        padding: 12px 15px;",
											"    }",
											"    th {",
											"        text-transform: uppercase;",
											"    }",
											"    td {",
											"        color: #676769;",
											"    }",
											"    tbody tr:nth-child(odd) {",
											"        background-color: white;",
											"        transition: 0.3s;",
											"    }",
											"    tbody tr:nth-child(even) {",
											"        background-color: #F5F5F5;",
											"        transition: 0.3s;",
											"    }",
											"    tbody tr:hover {",
											"        filter: brightness(90%);",
											"    }",
											"    .api {",
											"        cursor: pointer;",
											"    }",
											"    .api:active {",
											"        color: #202128;",
											"    }",
											"</style>",
											"<script>",
											"    let results = {{{results}}};",
											"    const headers = {{{headers}}};",
											"   ",
											"        $('#search-input').on('keyup', function () {",
											"            var value = $(this).val()",
											"            // console.log(\"Value = \", value)",
											"            var data = searchTable(results, value)",
											"            document.getElementById(\"entries-counter\").innerHTML = data.length",
											"            document.getElementById('table').innerHTML= ''",
											"            // console.log(data);",
											"            buildeTable(data)",
											"            // searchTable(results, value)",
											"        })",
											"        document.getElementById(\"entries-counter\").innerHTML = results.length",
											"        buildeTable(results);",
											"",
											"\t\tfunction searchTable(results, str) {",
											"            let filteredData = []",
											"            filteredData = results.filter(element => {",
											"                // console.log(\"element being searched = \", element)",
											"                let check_resutl = element.map(el => el.toString().toLowerCase().search(str.toLowerCase()))",
											"                const c = check_resutl.some(e => e !== -1)",
											"                if (c) {",
											"                    return true;",
											"                }",
											"            });",
											"            // console.log(\"filteredData = \", filteredData)",
											"            return filteredData",
											"        }",
											"",
											"        function buildeTable(results) {",
											"            // results = (fn1().length === 0)? results: fn1();",
											"            // console.log(\"results =\", results)",
											"            var table = d3.select(\"#table\").append(\"table\");",
											"            var header = table.append(\"thead\").append(\"tr\");",
											"            table.innerHTML = ''",
											"            header",
											"                .selectAll(\"th\")",
											"                .data(headers)",
											"                .enter()",
											"                .append(\"th\")",
											"                .text(function (d) {",
											"                    return d;",
											"                });",
											"            var tablebody = table.append(\"tbody\");",
											"            rows = tablebody",
											"                .selectAll(\"tr\")",
											"                .data(results)",
											"                .enter()",
											"                .append(\"tr\");",
											"",
											"            // each row has its own array, so here we enter it into the cells",
											"            cells = rows.selectAll(\"td\")",
											"                .data(function (d) {",
											"                    return d;",
											"                })",
											"                .enter()",
											"                .append(\"td\")",
											"                .text(function (d) {",
											"                    return d;",
											"                })",
											"                .filter(function (d) {",
											"                    return isEndpoint(d)",
											"                })",
											"                .attr('onclick', function (d) {",
											"                    return 'copy(\\\"' + d + '\\\")'",
											"                })",
											"                .attr('class', 'api');",
											"",
											"            function copy(text) {",
											"                const el = document.createElement('textarea');",
											"                el.value = text;",
											"                el.style = {",
											"                    display: 'none'",
											"                };",
											"                document.body.append(el);",
											"                el.select();",
											"                document.execCommand('copy');",
											"                document.body.removeChild(el);",
											"            }",
											"",
											"            function isEndpoint(url) {",
											"                const host = '{{host}}'",
											"                return url.toString().indexOf(host) !== -1",
											"            }",
											"",
											"        }",
											"",
											"        // results = (fn1().length === 0)? results: fn1();",
											"        // console.log(\"results =\", results)",
											"    </script>`;",
											"",
											"// Host checks for nested API endpoints and makes them copyable-on-click",
											"const host = pm.request.url.host.join(\".\");",
											"const response = pm.response.json();",
											"",
											"/* DATA PARSING */",
											"function parseData(response, host) {",
											"  // Row data passed in as array of arrays (ex. [[name1, api1], [name2, api2], ...])",
											"  ",
											"  const results = response.data.map(obj =>",
											"    {",
											"        let humanReadable = new Date(obj['timestamp']);",
											"        return [",
											"            obj['requests'],",
											"            (obj['bandwidth'])?(obj['bandwidth']/1048576).toFixed(2) + \" Mbps\":'No bandwidth',",
											"            // JSON.stringify(obj['identity']),",
											"            // {\"id\":577174332,\"type\":{\"id\":40,\"type\":\"tunnel_device\",\"label\":\"Network Tunnels\"},\"label\":\"csrtunnel\",\"deleted\":false}",
											"            `Idenetity Name: ${obj['identity'][\"label\"]},\\n \\n Ideneity type: ${obj['identity'][\"type\"][\"type\"]}`,",
											"            `Requests ${obj['counts'][\"requests\"]}, Allowed ${obj['counts'][\"allowedrequests\"]}, Blocked ${obj['counts'][\"blockedrequests\"]}`,",
											"            // JSON.stringify(obj['counts']),",
											"            obj['rank'],",
											"        ]",
											"    }",
											"    );",
											"",
											"  // Table Headers passed in as array of strings (ex. [\"Name\", \"Link\", ...])",
											"  const headers = ['requests', 'bandwidth', 'identity', 'counts', 'rank'];",
											"  ",
											"  return [results, headers]",
											"}",
											"function myFunction() {",
											"  // Declare variables",
											"  var input, filter, table, tr, td, i, txtValue;",
											"  input = document.getElementById(\"myInput\");",
											"  filter = input.value.toUpperCase();",
											"  table = document.getElementById(\"myTable\");",
											"  tr = table.getElementsByTagName(\"tr\");",
											"",
											"  // Loop through all table rows, and hide those who don't match the search query",
											"  for (i = 0; i < tr.length; i++) {",
											"    td = tr[i].getElementsByTagName(\"td\")[0];",
											"    if (td) {",
											"      txtValue = td.textContent || td.innerText;",
											"      if (txtValue.toUpperCase().indexOf(filter) > -1) {",
											"        tr[i].style.display = \"\";",
											"      } else {",
											"        tr[i].style.display = \"none\";",
											"      }",
											"    }",
											"  }",
											"}",
											"/* FEED DATA INTO TEMPLATE */",
											"pm.visualizer.set(template, {",
											"  // Template will receive stringified JSON",
											"  results: JSON.stringify(parseData(response)[0]),",
											"  headers: JSON.stringify(parseData(response)[1]),",
											"  host",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-identities?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-identities"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Top Identities All DNS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */\r",
											"var template = `\r",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>\r",
											"\r",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\r",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\r",
											"<div>\r",
											"  <canvas id=\"myChart\"></canvas>\r",
											"</div>\r",
											"    <script>\r",
											"      const labels = {{{headers_Identities}}};\r",
											"      console.log('headers_Identities = ', labels)\r",
											"      const data = {\r",
											"        labels: labels,\r",
											"        datasets: [{\r",
											"          label: 'Allowed Events',\r",
											"          backgroundColor: 'rgb(255, 99, 132)',\r",
											"          borderColor: 'rgb(255, 99, 132)',\r",
											"          data: {{{dataset_allowed}}},\r",
											"        },{\r",
											"          label: 'Blocked Events',\r",
											"          backgroundColor: 'rgb(153, 102, 255)',\r",
											"          borderColor: 'rgb(153, 102, 255)',\r",
											"          data: {{{dataset_blocked}}},\r",
											"        }]\r",
											"      };\r",
											"    \r",
											"      const config = {\r",
											"        type: 'bar',\r",
											"        data: data,\r",
											"        options: {\r",
											"            plugins: {\r",
											"            title: {\r",
											"                display: true,\r",
											"                text: 'Chart.js Bar Chart - Stacked'\r",
											"            },\r",
											"            },\r",
											"            responsive: true,\r",
											"            scales: {\r",
											"            x: {\r",
											"                stacked: true,\r",
											"            },\r",
											"            y: {\r",
											"                stacked: true\r",
											"            }\r",
											"            }\r",
											"        }\r",
											"        };\r",
											"        const myChart = new Chart(\r",
											"        document.getElementById('myChart'),\r",
											"        config\r",
											"      );\r",
											"    </script>\r",
											" `;\r",
											"\r",
											"// Host checks for nested API endpoints and makes them copyable-on-click\r",
											"// const host = pm.request.url.host.join(\".\");\r",
											"const response = pm.response.json();\r",
											"// console.log(response)\r",
											"/* DATA PARSING */\r",
											"function parseData(response) {\r",
											"    // console.log(\"response goes here:\",response)\r",
											"    let headers_Identities = response.data.map( item => item.identity.type.type + \" : \" + item.identity.label)\r",
											"    let dataset_allowed = response.data.map( item => item.counts.allowedrequests)\r",
											"    let dataset_blocked = response.data.map( item => item.counts.blockedrequests)\r",
											"    // console.log(headers_Identities)\r",
											"    // console.log(dataset_allowed)\r",
											"    // console.log(dataset_blocked)\r",
											"  \r",
											"  return [headers_Identities, dataset_allowed, dataset_blocked]\r",
											"}\r",
											"\r",
											"/* FEED DATA INTO TEMPLATE */\r",
											"pm.visualizer.set(template, {\r",
											"  // Template will receive stringified JSON\r",
											"  headers_Identities: JSON.stringify(parseData(response)[0]),\r",
											"  dataset_allowed: JSON.stringify(parseData(response)[1]),\r",
											"  dataset_blocked: JSON.stringify(parseData(response)[2])\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-identities/dns?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-identities",
										"dns"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Top Identities All Proxy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */\r",
											"var template = `\r",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>\r",
											"\r",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\r",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\r",
											"<div>\r",
											"  <canvas id=\"myChart\"></canvas>\r",
											"</div>\r",
											"    <script>\r",
											"      const labels = {{{headers_Identities}}};\r",
											"      console.log('headers_Identities = ', labels)\r",
											"      const data = {\r",
											"        labels: labels,\r",
											"        datasets: [{\r",
											"          label: 'Allowed Events',\r",
											"          backgroundColor: 'rgb(255, 99, 132)',\r",
											"          borderColor: 'rgb(255, 99, 132)',\r",
											"          data: {{{dataset_allowed}}},\r",
											"        },{\r",
											"          label: 'Blocked Events',\r",
											"          backgroundColor: 'rgb(153, 102, 255)',\r",
											"          borderColor: 'rgb(153, 102, 255)',\r",
											"          data: {{{dataset_blocked}}},\r",
											"        }]\r",
											"      };\r",
											"    \r",
											"      const config = {\r",
											"        type: 'bar',\r",
											"        data: data,\r",
											"        options: {\r",
											"            plugins: {\r",
											"            title: {\r",
											"                display: true,\r",
											"                text: 'Chart.js Bar Chart - Stacked'\r",
											"            },\r",
											"            },\r",
											"            responsive: true,\r",
											"            scales: {\r",
											"            x: {\r",
											"                stacked: true,\r",
											"            },\r",
											"            y: {\r",
											"                stacked: true\r",
											"            }\r",
											"            }\r",
											"        }\r",
											"        };\r",
											"        const myChart = new Chart(\r",
											"        document.getElementById('myChart'),\r",
											"        config\r",
											"      );\r",
											"    </script>\r",
											" `;\r",
											"\r",
											"// Host checks for nested API endpoints and makes them copyable-on-click\r",
											"// const host = pm.request.url.host.join(\".\");\r",
											"const response = pm.response.json();\r",
											"// console.log(response)\r",
											"/* DATA PARSING */\r",
											"function parseData(response) {\r",
											"    // console.log(\"response goes here:\",response)\r",
											"    let headers_Identities = response.data.map( item => item.identity.type.type + \" : \" + item.identity.label)\r",
											"    let dataset_allowed = response.data.map( item => item.counts.allowedrequests)\r",
											"    let dataset_blocked = response.data.map( item => item.counts.blockedrequests)\r",
											"    // console.log(headers_Identities)\r",
											"    // console.log(dataset_allowed)\r",
											"    // console.log(dataset_blocked)\r",
											"  \r",
											"  return [headers_Identities, dataset_allowed, dataset_blocked]\r",
											"}\r",
											"\r",
											"/* FEED DATA INTO TEMPLATE */\r",
											"pm.visualizer.set(template, {\r",
											"  // Template will receive stringified JSON\r",
											"  headers_Identities: JSON.stringify(parseData(response)[0]),\r",
											"  dataset_allowed: JSON.stringify(parseData(response)[1]),\r",
											"  dataset_blocked: JSON.stringify(parseData(response)[2])\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-identities/proxy?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=10&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-identities",
										"proxy"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Top Identities All FW",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */\r",
											"var template = `\r",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>\r",
											"\r",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\r",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\r",
											"<div>\r",
											"  <canvas id=\"myChart\"></canvas>\r",
											"</div>\r",
											"    <script>\r",
											"      const labels = {{{headers_Identities}}};\r",
											"      console.log('headers_Identities = ', labels)\r",
											"      const data = {\r",
											"        labels: labels,\r",
											"        datasets: [{\r",
											"          label: 'Allowed Events',\r",
											"          backgroundColor: 'rgb(255, 99, 132)',\r",
											"          borderColor: 'rgb(255, 99, 132)',\r",
											"          data: {{{dataset_allowed}}},\r",
											"        },{\r",
											"          label: 'Blocked Events',\r",
											"          backgroundColor: 'rgb(153, 102, 255)',\r",
											"          borderColor: 'rgb(153, 102, 255)',\r",
											"          data: {{{dataset_blocked}}},\r",
											"        }]\r",
											"      };\r",
											"    \r",
											"      const config = {\r",
											"        type: 'bar',\r",
											"        data: data,\r",
											"        options: {\r",
											"            plugins: {\r",
											"            title: {\r",
											"                display: true,\r",
											"                text: 'Chart.js Bar Chart - Stacked'\r",
											"            },\r",
											"            },\r",
											"            responsive: true,\r",
											"            scales: {\r",
											"            x: {\r",
											"                stacked: true,\r",
											"            },\r",
											"            y: {\r",
											"                stacked: true\r",
											"            }\r",
											"            }\r",
											"        }\r",
											"        };\r",
											"        const myChart = new Chart(\r",
											"        document.getElementById('myChart'),\r",
											"        config\r",
											"      );\r",
											"    </script>\r",
											" `;\r",
											"\r",
											"// Host checks for nested API endpoints and makes them copyable-on-click\r",
											"// const host = pm.request.url.host.join(\".\");\r",
											"const response = pm.response.json();\r",
											"// console.log(response)\r",
											"/* DATA PARSING */\r",
											"function parseData(response) {\r",
											"    // console.log(\"response goes here:\",response)\r",
											"    let headers_Identities = response.data.map( item => item.identity.type.type + \" : \" + item.identity.label)\r",
											"    let dataset_allowed = response.data.map( item => item.counts.allowedrequests)\r",
											"    let dataset_blocked = response.data.map( item => item.counts.blockedrequests)\r",
											"    // console.log(headers_Identities)\r",
											"    // console.log(dataset_allowed)\r",
											"    // console.log(dataset_blocked)\r",
											"  \r",
											"  return [headers_Identities, dataset_allowed, dataset_blocked]\r",
											"}\r",
											"\r",
											"/* FEED DATA INTO TEMPLATE */\r",
											"pm.visualizer.set(template, {\r",
											"  // Template will receive stringified JSON\r",
											"  headers_Identities: JSON.stringify(parseData(response)[0]),\r",
											"  dataset_allowed: JSON.stringify(parseData(response)[1]),\r",
											"  dataset_blocked: JSON.stringify(parseData(response)[2])\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-identities/firewall?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=10&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-identities",
										"firewall"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "oauth2",
						"oauth2": [
							{
								"key": "addTokenTo",
								"value": "header",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "3. Identity distribution",
					"item": [
						{
							"name": "Identity distribution All",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identity-distribution?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=10&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identity-distribution"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity distribution DNS",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identity-distribution/dns?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=10&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identity-distribution",
										"dns"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity distribution proxy",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identity-distribution/proxy?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=10&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identity-distribution",
										"proxy"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "broken Identity distribution firewall",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identity-distribution/firewall?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=10&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identity-distribution",
										"firewall"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "oauth2",
						"oauth2": [
							{
								"key": "addTokenTo",
								"value": "header",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "4. Top Destinations",
					"item": [
						{
							"name": "Top Destinations All",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */",
											"var template = `",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">",
											"    <div>",
											"        <div>",
											"            <canvas id=\"myChart\"></canvas>",
											"        </div>",
											"        <div>",
											"            <canvas id=\"myChartSecond\"></canvas>",
											"        </div>",
											"        <div>",
											"            <canvas id=\"myChartThird\"></canvas>",
											"        </div>",
											"    </div>",
											"    <script>",
											"      const labels = {{{headers_y}}};",
											"      console.log('dataset_count = ', labels)",
											"      const data = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Events count',",
											"          backgroundColor: 'rgb(153, 102, 255)',",
											"          borderColor: 'rgb(153, 102, 255)',",
											"          data: {{{dataset_x}}},",
											"        }]",
											"      };",
											"    ",
											"      const config = {",
											"        type: 'bar',",
											"        data: data,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'All Requests by timerange'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        data_second_chart = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Allowed Events count',",
											"          backgroundColor: 'rgb(75, 192, 192)',",
											"          borderColor: 'rgb(75, 192, 192)',",
											"          data: {{{dataset_x_allowed}}},",
											"          fill: true",
											"            },{",
											"          label: 'Blocked Events count',",
											"          backgroundColor: 'rgb(255, 99, 132)',",
											"          borderColor: 'rgb(255, 99, 132)',",
											"          data: {{{dataset_x_blocked}}},",
											"          fill: true",
											"            },]",
											"        };",
											"        config_second_chart = {",
											"        type: 'bar',",
											"        data: data_second_chart,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'All Requests by timerange Allowed vs. Blocked'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"    data_third_chart  = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Bandwidth of queries',",
											"          backgroundColor: 'rgb(54, 162, 235)',",
											"          borderColor: 'rgb(54, 162, 235)',",
											"          data: {{{dataset_x_bw}}},",
											"          fill: true",
											"            }]",
											"        };",
											"    config_third_chart = {",
											"        type: 'bar',",
											"        data: data_third_chart,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'All Requests Bandwidth in Bytes'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"    const myChart = new Chart(",
											"        document.getElementById('myChart'),",
											"        config",
											"      );",
											"    const myChartSecond = new Chart(",
											"        document.getElementById('myChartSecond'),",
											"        config_second_chart",
											"      );",
											"    const myChartThird = new Chart(",
											"        document.getElementById('myChartThird'),",
											"        config_third_chart",
											"      );",
											"      ",
											"    </script>",
											" `;",
											"",
											"// Host checks for nested API endpoints and makes them copyable-on-click",
											"// const host = pm.request.url.host.join(\".\");",
											"const response = pm.response.json();",
											"// console.log(response)",
											"/* DATA PARSING */",
											"function parseData(response) {",
											"    // console.log(\"response goes here:\",response)",
											"    let headers_y = response.data.map( item => item.domain)",
											"    let dataset_x = response.data.map( item => item.count)",
											"    let dataset_x_bw = response.data.map( item => (item.bandwidth)?item.bandwidth: 0)",
											"    let dataset_x_allowed = response.data.map( item => item.counts.allowedrequests)",
											"    let dataset_x_blocked = response.data.map( item => item.counts.blockedrequests)",
											"    // console.log(headers_Identities)",
											"    // console.log(dataset_allowed)",
											"  return [headers_y, dataset_x, dataset_x_bw, dataset_x_allowed, dataset_x_blocked]",
											"}",
											"",
											"/* FEED DATA INTO TEMPLATE */",
											"pm.visualizer.set(template, {",
											"  // Template will receive stringified JSON",
											"  headers_y: JSON.stringify(parseData(response)[0]),",
											"  dataset_x: JSON.stringify(parseData(response)[1]),",
											"  dataset_x_bw: JSON.stringify(parseData(response)[2]),",
											"  dataset_x_allowed: JSON.stringify(parseData(response)[3]),",
											"  dataset_x_blocked: JSON.stringify(parseData(response)[4]),",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-destinations?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-destinations"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Top Destinations DNS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */",
											"var template = `",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">",
											"    <div>",
											"        <div>",
											"            <canvas id=\"myChart\"></canvas>",
											"        </div>",
											"        <div>",
											"            <canvas id=\"myChartSecond\"></canvas>",
											"        </div>",
											"        <div>",
											"            <canvas id=\"myChartThird\"></canvas>",
											"        </div>",
											"    </div>",
											"    <script>",
											"      const labels = {{{headers_y}}};",
											"      console.log('dataset_count = ', labels)",
											"      const data = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Events count',",
											"          backgroundColor: 'rgb(153, 102, 255)',",
											"          borderColor: 'rgb(153, 102, 255)',",
											"          data: {{{dataset_x}}},",
											"        }]",
											"      };",
											"    ",
											"      const config = {",
											"        type: 'bar',",
											"        data: data,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'All Requests by timerange'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        data_second_chart = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Allowed Events count',",
											"          backgroundColor: 'rgb(75, 192, 192)',",
											"          borderColor: 'rgb(75, 192, 192)',",
											"          data: {{{dataset_x_allowed}}},",
											"          fill: true",
											"            },{",
											"          label: 'Blocked Events count',",
											"          backgroundColor: 'rgb(255, 99, 132)',",
											"          borderColor: 'rgb(255, 99, 132)',",
											"          data: {{{dataset_x_blocked}}},",
											"          fill: true",
											"            },]",
											"        };",
											"        config_second_chart = {",
											"        type: 'bar',",
											"        data: data_second_chart,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'All Requests by timerange Allowed vs. Blocked'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"    data_third_chart  = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Bandwidth of queries',",
											"          backgroundColor: 'rgb(54, 162, 235)',",
											"          borderColor: 'rgb(54, 162, 235)',",
											"          data: {{{dataset_x_bw}}},",
											"          fill: true",
											"            }]",
											"        };",
											"    config_third_chart = {",
											"        type: 'bar',",
											"        data: data_third_chart,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'All Requests Bandwidth in Bytes'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"    const myChart = new Chart(",
											"        document.getElementById('myChart'),",
											"        config",
											"      );",
											"    const myChartSecond = new Chart(",
											"        document.getElementById('myChartSecond'),",
											"        config_second_chart",
											"      );",
											"    const myChartThird = new Chart(",
											"        document.getElementById('myChartThird'),",
											"        config_third_chart",
											"      );",
											"      ",
											"    </script>",
											" `;",
											"",
											"// Host checks for nested API endpoints and makes them copyable-on-click",
											"// const host = pm.request.url.host.join(\".\");",
											"const response = pm.response.json();",
											"// console.log(response)",
											"/* DATA PARSING */",
											"function parseData(response) {",
											"    // console.log(\"response goes here:\",response)",
											"    let headers_y = response.data.map( item => item.domain)",
											"    let dataset_x = response.data.map( item => item.count)",
											"    let dataset_x_bw = response.data.map( item => (item.bandwidth)?item.bandwidth: 0)",
											"    let dataset_x_allowed = response.data.map( item => item.counts.allowedrequests)",
											"    let dataset_x_blocked = response.data.map( item => item.counts.blockedrequests)",
											"    // console.log(headers_Identities)",
											"    // console.log(dataset_allowed)",
											"  return [headers_y, dataset_x, dataset_x_bw, dataset_x_allowed, dataset_x_blocked]",
											"}",
											"",
											"/* FEED DATA INTO TEMPLATE */",
											"pm.visualizer.set(template, {",
											"  // Template will receive stringified JSON",
											"  headers_y: JSON.stringify(parseData(response)[0]),",
											"  dataset_x: JSON.stringify(parseData(response)[1]),",
											"  dataset_x_bw: JSON.stringify(parseData(response)[2]),",
											"  dataset_x_allowed: JSON.stringify(parseData(response)[3]),",
											"  dataset_x_blocked: JSON.stringify(parseData(response)[4]),",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-destinations/dns?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=10&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-destinations",
										"dns"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Top Destinations proxy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */",
											"var template = `",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">",
											"    <div>",
											"        <div>",
											"            <canvas id=\"myChart\"></canvas>",
											"        </div>",
											"        <div>",
											"            <canvas id=\"myChartSecond\"></canvas>",
											"        </div>",
											"        <div>",
											"            <canvas id=\"myChartThird\"></canvas>",
											"        </div>",
											"    </div>",
											"    <script>",
											"      const labels = {{{headers_y}}};",
											"      console.log('dataset_count = ', labels)",
											"      const data = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Events count',",
											"          backgroundColor: 'rgb(153, 102, 255)',",
											"          borderColor: 'rgb(153, 102, 255)',",
											"          data: {{{dataset_x}}},",
											"        }]",
											"      };",
											"    ",
											"      const config = {",
											"        type: 'bar',",
											"        data: data,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'All Requests by timerange'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        data_second_chart = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Allowed Events count',",
											"          backgroundColor: 'rgb(75, 192, 192)',",
											"          borderColor: 'rgb(75, 192, 192)',",
											"          data: {{{dataset_x_allowed}}},",
											"          fill: true",
											"            },{",
											"          label: 'Blocked Events count',",
											"          backgroundColor: 'rgb(255, 99, 132)',",
											"          borderColor: 'rgb(255, 99, 132)',",
											"          data: {{{dataset_x_blocked}}},",
											"          fill: true",
											"            },]",
											"        };",
											"        config_second_chart = {",
											"        type: 'bar',",
											"        data: data_second_chart,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'All Requests by timerange Allowed vs. Blocked'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"    data_third_chart  = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Bandwidth of queries',",
											"          backgroundColor: 'rgb(54, 162, 235)',",
											"          borderColor: 'rgb(54, 162, 235)',",
											"          data: {{{dataset_x_bw}}},",
											"          fill: true",
											"            }]",
											"        };",
											"    config_third_chart = {",
											"        type: 'bar',",
											"        data: data_third_chart,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'All Requests Bandwidth in Bytes'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"    const myChart = new Chart(",
											"        document.getElementById('myChart'),",
											"        config",
											"      );",
											"    const myChartSecond = new Chart(",
											"        document.getElementById('myChartSecond'),",
											"        config_second_chart",
											"      );",
											"    const myChartThird = new Chart(",
											"        document.getElementById('myChartThird'),",
											"        config_third_chart",
											"      );",
											"      ",
											"    </script>",
											" `;",
											"",
											"// Host checks for nested API endpoints and makes them copyable-on-click",
											"// const host = pm.request.url.host.join(\".\");",
											"const response = pm.response.json();",
											"// console.log(response)",
											"/* DATA PARSING */",
											"function parseData(response) {",
											"    // console.log(\"response goes here:\",response)",
											"    let headers_y = response.data.map( item => item.domain)",
											"    let dataset_x = response.data.map( item => item.count)",
											"    let dataset_x_bw = response.data.map( item => (item.bandwidth)?item.bandwidth: 0)",
											"    let dataset_x_allowed = response.data.map( item => item.counts.allowedrequests)",
											"    let dataset_x_blocked = response.data.map( item => item.counts.blockedrequests)",
											"    // console.log(headers_Identities)",
											"    // console.log(dataset_allowed)",
											"  return [headers_y, dataset_x, dataset_x_bw, dataset_x_allowed, dataset_x_blocked]",
											"}",
											"",
											"/* FEED DATA INTO TEMPLATE */",
											"pm.visualizer.set(template, {",
											"  // Template will receive stringified JSON",
											"  headers_y: JSON.stringify(parseData(response)[0]),",
											"  dataset_x: JSON.stringify(parseData(response)[1]),",
											"  dataset_x_bw: JSON.stringify(parseData(response)[2]),",
											"  dataset_x_allowed: JSON.stringify(parseData(response)[3]),",
											"  dataset_x_blocked: JSON.stringify(parseData(response)[4]),",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-destinations/proxy?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-destinations",
										"proxy"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Top Destinations firewall",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */",
											"var template = `",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">",
											"    <div>",
											"        <div>",
											"            <canvas id=\"myChart\"></canvas>",
											"        </div>",
											"        <div>",
											"            <canvas id=\"myChartSecond\"></canvas>",
											"        </div>",
											"        <div>",
											"            <canvas id=\"myChartThird\"></canvas>",
											"        </div>",
											"    </div>",
											"    <script>",
											"      const labels = {{{headers_y}}};",
											"      console.log('dataset_count = ', labels)",
											"      const data = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Events count',",
											"          backgroundColor: 'rgb(153, 102, 255)',",
											"          borderColor: 'rgb(153, 102, 255)',",
											"          data: {{{dataset_x}}},",
											"        }]",
											"      };",
											"    ",
											"      const config = {",
											"        type: 'bar',",
											"        data: data,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'All Requests by timerange'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        data_second_chart = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Allowed Events count',",
											"          backgroundColor: 'rgb(75, 192, 192)',",
											"          borderColor: 'rgb(75, 192, 192)',",
											"          data: {{{dataset_x_allowed}}},",
											"          fill: true",
											"            },{",
											"          label: 'Blocked Events count',",
											"          backgroundColor: 'rgb(255, 99, 132)',",
											"          borderColor: 'rgb(255, 99, 132)',",
											"          data: {{{dataset_x_blocked}}},",
											"          fill: true",
											"            },]",
											"        };",
											"        config_second_chart = {",
											"        type: 'bar',",
											"        data: data_second_chart,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'All Requests by timerange Allowed vs. Blocked'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"    data_third_chart  = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Bandwidth of queries',",
											"          backgroundColor: 'rgb(54, 162, 235)',",
											"          borderColor: 'rgb(54, 162, 235)',",
											"          data: {{{dataset_x_bw}}},",
											"          fill: true",
											"            }]",
											"        };",
											"    config_third_chart = {",
											"        type: 'bar',",
											"        data: data_third_chart,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'All Requests Bandwidth in Bytes'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"    const myChart = new Chart(",
											"        document.getElementById('myChart'),",
											"        config",
											"      );",
											"    const myChartSecond = new Chart(",
											"        document.getElementById('myChartSecond'),",
											"        config_second_chart",
											"      );",
											"    const myChartThird = new Chart(",
											"        document.getElementById('myChartThird'),",
											"        config_third_chart",
											"      );",
											"      ",
											"    </script>",
											" `;",
											"",
											"// Host checks for nested API endpoints and makes them copyable-on-click",
											"// const host = pm.request.url.host.join(\".\");",
											"const response = pm.response.json();",
											"// console.log(response)",
											"/* DATA PARSING */",
											"function parseData(response) {",
											"    // console.log(\"response goes here:\",response)",
											"    let headers_y = response.data.map( item => item.domain)",
											"    let dataset_x = response.data.map( item => item.count)",
											"    let dataset_x_bw = response.data.map( item => (item.bandwidth)?item.bandwidth: 0)",
											"    let dataset_x_allowed = response.data.map( item => item.counts.allowedrequests)",
											"    let dataset_x_blocked = response.data.map( item => item.counts.blockedrequests)",
											"    // console.log(headers_Identities)",
											"    // console.log(dataset_allowed)",
											"  return [headers_y, dataset_x, dataset_x_bw, dataset_x_allowed, dataset_x_blocked]",
											"}",
											"",
											"/* FEED DATA INTO TEMPLATE */",
											"pm.visualizer.set(template, {",
											"  // Template will receive stringified JSON",
											"  headers_y: JSON.stringify(parseData(response)[0]),",
											"  dataset_x: JSON.stringify(parseData(response)[1]),",
											"  dataset_x_bw: JSON.stringify(parseData(response)[2]),",
											"  dataset_x_allowed: JSON.stringify(parseData(response)[3]),",
											"  dataset_x_blocked: JSON.stringify(parseData(response)[4]),",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-destinations/firewall?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-destinations",
										"firewall"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Top URLs",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-urls?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-urls"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5. Top Categories",
					"item": [
						{
							"name": "Top categories All",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */",
											"var template = `",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">",
											"<div>",
											"    <div>",
											"        <canvas id=\"myChart\"></canvas>",
											"    </div>",
											"    <div>",
											"        <canvas id=\"myChartBandwidth\"></canvas>",
											"    </div>  ",
											"</div>",
											"    <script>",
											"      const labels = {{{headers_type_label}}};",
											"      console.log('dataset_count = ', labels)",
											"      const data = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Events count',",
											"          backgroundColor: 'rgb(255, 99, 132)',",
											"          borderColor: 'rgb(255, 99, 132)',",
											"          data: {{{dataset_count}}},",
											"        }]",
											"      };",
											"      const dataBandwidth = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Categories Consumed bandwidth in MB',",
											"          backgroundColor: 'rgb(153, 102, 255)',",
											"          borderColor: 'rgb(153, 102, 255)',",
											"          data: {{{dataset_bw}}},",
											"        }]",
											"      };",
											"    ",
											"      const config = {",
											"        type: 'bar',",
											"        data: data,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'Top categories Count Proxy'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        const configBandwidth = {",
											"        type: 'bar',",
											"        data: dataBandwidth,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'Top categories Bandwidth in Megabytes Proxy'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        const myChart = new Chart(",
											"        document.getElementById('myChart'),",
											"        config",
											"      );",
											"      const myChartBandwidth = new Chart(",
											"        document.getElementById('myChartBandwidth'),",
											"        configBandwidth",
											"      );",
											"    </script>",
											" `;",
											"",
											"// Host checks for nested API endpoints and makes them copyable-on-click",
											"// const host = pm.request.url.host.join(\".\");",
											"const response = pm.response.json();",
											"// console.log(response)",
											"/* DATA PARSING */",
											"function parseData(response) {",
											"    // console.log(\"response goes here:\",response)",
											"    let headers_type_label = response.data.map( item => item.category.type + \" : \" + item.category.label)",
											"    let dataset_count = response.data.map( item => item.count)",
											"    let dataset_bw = response.data.map( item => item.bandwidth / (1024*1024))",
											"    // console.log(headers_Identities)",
											"    // console.log(dataset_allowed)",
											"  return [headers_type_label, dataset_count, dataset_bw]",
											"}",
											"",
											"/* FEED DATA INTO TEMPLATE */",
											"pm.visualizer.set(template, {",
											"  // Template will receive stringified JSON",
											"  headers_type_label: JSON.stringify(parseData(response)[0]),",
											"  dataset_count: JSON.stringify(parseData(response)[1]),",
											"  dataset_bw: JSON.stringify(parseData(response)[2]),",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-categories?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-categories"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Top categories DNS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */\r",
											"var template = `\r",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>\r",
											"\r",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\r",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\r",
											"<div>\r",
											"  <canvas id=\"myChart\"></canvas>\r",
											"</div>\r",
											"    <script>\r",
											"      const labels = {{{headers_type_label}}};\r",
											"      console.log('dataset_count = ', labels)\r",
											"      const data = {\r",
											"        labels: labels,\r",
											"        datasets: [{\r",
											"          label: 'Events count',\r",
											"          backgroundColor: 'rgb(255, 99, 132)',\r",
											"          borderColor: 'rgb(255, 99, 132)',\r",
											"          data: {{{dataset_count}}},\r",
											"        }]\r",
											"      };\r",
											"    \r",
											"      const config = {\r",
											"        type: 'bar',\r",
											"        data: data,\r",
											"        options: {\r",
											"            plugins: {\r",
											"            title: {\r",
											"                display: true,\r",
											"                text: 'Top categories DNS'\r",
											"            },\r",
											"            },\r",
											"            responsive: true,\r",
											"            scales: {\r",
											"            x: {\r",
											"                stacked: true,\r",
											"            },\r",
											"            y: {\r",
											"                stacked: true\r",
											"            }\r",
											"            }\r",
											"        }\r",
											"        };\r",
											"        const myChart = new Chart(\r",
											"        document.getElementById('myChart'),\r",
											"        config\r",
											"      );\r",
											"    </script>\r",
											" `;\r",
											"\r",
											"// Host checks for nested API endpoints and makes them copyable-on-click\r",
											"// const host = pm.request.url.host.join(\".\");\r",
											"const response = pm.response.json();\r",
											"// console.log(response)\r",
											"/* DATA PARSING */\r",
											"function parseData(response) {\r",
											"    // console.log(\"response goes here:\",response)\r",
											"    let headers_type_label = response.data.map( item => item.category.type + \" : \" + item.category.label)\r",
											"    let dataset_count = response.data.map( item => item.count)\r",
											"    // console.log(headers_Identities)\r",
											"    // console.log(dataset_allowed)\r",
											"  return [headers_type_label, dataset_count]\r",
											"}\r",
											"\r",
											"/* FEED DATA INTO TEMPLATE */\r",
											"pm.visualizer.set(template, {\r",
											"  // Template will receive stringified JSON\r",
											"  headers_type_label: JSON.stringify(parseData(response)[0]),\r",
											"  dataset_count: JSON.stringify(parseData(response)[1]),\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-categories/dns?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=10&offset=10",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-categories",
										"dns"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Top categories proxy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */\r",
											"var template = `\r",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>\r",
											"\r",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\r",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\r",
											"<div>\r",
											"    <div>\r",
											"        <canvas id=\"myChart\"></canvas>\r",
											"    </div>\r",
											"    <div>\r",
											"        <canvas id=\"myChartBandwidth\"></canvas>\r",
											"    </div>  \r",
											"</div>\r",
											"    <script>\r",
											"      const labels = {{{headers_type_label}}};\r",
											"      console.log('dataset_count = ', labels)\r",
											"      const data = {\r",
											"        labels: labels,\r",
											"        datasets: [{\r",
											"          label: 'Events count',\r",
											"          backgroundColor: 'rgb(255, 99, 132)',\r",
											"          borderColor: 'rgb(255, 99, 132)',\r",
											"          data: {{{dataset_count}}},\r",
											"        }]\r",
											"      };\r",
											"      const dataBandwidth = {\r",
											"        labels: labels,\r",
											"        datasets: [{\r",
											"          label: 'Categories Consumed bandwidth in MB',\r",
											"          backgroundColor: 'rgb(153, 102, 255)',\r",
											"          borderColor: 'rgb(153, 102, 255)',\r",
											"          data: {{{dataset_bw}}},\r",
											"        }]\r",
											"      };\r",
											"    \r",
											"      const config = {\r",
											"        type: 'bar',\r",
											"        data: data,\r",
											"        options: {\r",
											"            plugins: {\r",
											"            title: {\r",
											"                display: true,\r",
											"                text: 'Top categories Count Proxy'\r",
											"            },\r",
											"            },\r",
											"            responsive: true,\r",
											"            scales: {\r",
											"            x: {\r",
											"                stacked: true,\r",
											"            },\r",
											"            y: {\r",
											"                stacked: true\r",
											"            }\r",
											"            }\r",
											"        }\r",
											"        };\r",
											"        const configBandwidth = {\r",
											"        type: 'bar',\r",
											"        data: dataBandwidth,\r",
											"        options: {\r",
											"            plugins: {\r",
											"            title: {\r",
											"                display: true,\r",
											"                text: 'Top categories Bandwidth in Megabytes Proxy'\r",
											"            },\r",
											"            },\r",
											"            responsive: true,\r",
											"            scales: {\r",
											"            x: {\r",
											"                stacked: true,\r",
											"            },\r",
											"            y: {\r",
											"                stacked: true\r",
											"            }\r",
											"            }\r",
											"        }\r",
											"        };\r",
											"        const myChart = new Chart(\r",
											"        document.getElementById('myChart'),\r",
											"        config\r",
											"      );\r",
											"      const myChartBandwidth = new Chart(\r",
											"        document.getElementById('myChartBandwidth'),\r",
											"        configBandwidth\r",
											"      );\r",
											"    </script>\r",
											" `;\r",
											"\r",
											"// Host checks for nested API endpoints and makes them copyable-on-click\r",
											"// const host = pm.request.url.host.join(\".\");\r",
											"const response = pm.response.json();\r",
											"// console.log(response)\r",
											"/* DATA PARSING */\r",
											"function parseData(response) {\r",
											"    // console.log(\"response goes here:\",response)\r",
											"    let headers_type_label = response.data.map( item => item.category.type + \" : \" + item.category.label)\r",
											"    let dataset_count = response.data.map( item => item.count)\r",
											"    let dataset_bw = response.data.map( item => item.bandwidth / (1024*1024))\r",
											"    // console.log(headers_Identities)\r",
											"    // console.log(dataset_allowed)\r",
											"  return [headers_type_label, dataset_count, dataset_bw]\r",
											"}\r",
											"\r",
											"/* FEED DATA INTO TEMPLATE */\r",
											"pm.visualizer.set(template, {\r",
											"  // Template will receive stringified JSON\r",
											"  headers_type_label: JSON.stringify(parseData(response)[0]),\r",
											"  dataset_count: JSON.stringify(parseData(response)[1]),\r",
											"  dataset_bw: JSON.stringify(parseData(response)[2]),\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-categories/proxy?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=5&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-categories",
										"proxy"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Broken Top categories firewall",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-categories/firewall?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-categories",
										"firewall"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6. Top Event Types",
					"item": [
						{
							"name": "Top Event Types All",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-eventtypes?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-eventtypes"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "**Description:***Gets a list of event types ordered by the number of requests made for each type of event in descending order. The event types are: \"domain_security\", \"domain_integration\", \"url_security\", \"url_integration\", \"cisco_amp\" and \"antivirus\".*"
				},
				{
					"name": "7. Top DNS Query Types",
					"item": [
						{
							"name": "Top categories All",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */",
											"var template = `",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">",
											"<div>",
											"  <canvas id=\"myChart\"></canvas>",
											"</div>",
											"    <script>",
											"      const labels = {{{headers_type_label}}};",
											"      console.log('dataset_count = ', labels)",
											"      const data = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Events count',",
											"          backgroundColor: 'rgb(153, 102, 255)',",
											"          borderColor: 'rgb(153, 102, 255)',",
											"          data: {{{dataset_requests_count}}},",
											"        }]",
											"      };",
											"    ",
											"      const config = {",
											"        type: 'bar',",
											"        data: data,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'Top DNS Query Types'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        const myChart = new Chart(",
											"        document.getElementById('myChart'),",
											"        config",
											"      );",
											"    </script>",
											" `;",
											"",
											"// Host checks for nested API endpoints and makes them copyable-on-click",
											"// const host = pm.request.url.host.join(\".\");",
											"const response = pm.response.json();",
											"// console.log(response)",
											"/* DATA PARSING */",
											"function parseData(response) {",
											"    // console.log(\"response goes here:\",response)",
											"    let headers_querytype = response.data.map( item => item.querytype)",
											"    let dataset_requests_count = response.data.map( item => item.requests)",
											"    // console.log(headers_Identities)",
											"    // console.log(dataset_allowed)",
											"  return [headers_querytype, dataset_requests_count]",
											"}",
											"",
											"/* FEED DATA INTO TEMPLATE */",
											"pm.visualizer.set(template, {",
											"  // Template will receive stringified JSON",
											"  headers_type_label: JSON.stringify(parseData(response)[0]),",
											"  dataset_requests_count: JSON.stringify(parseData(response)[1]),",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-dns-query-types?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-dns-query-types"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8. Organization Requests by Hour",
					"item": [
						{
							"name": "Requests by Hour (ALL)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */",
											"var template = `",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">",
											"    <div>",
											"        <div>",
											"            <canvas id=\"myChart\"></canvas>",
											"        </div>",
											"        <div>",
											"            <canvas id=\"myChartSecond\"></canvas>",
											"        </div>",
											"    </div>",
											"    <script>",
											"      const labels = {{{headers_y}}};",
											"      console.log('dataset_count = ', labels)",
											"      const data = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Events count',",
											"          backgroundColor: 'rgb(153, 102, 255)',",
											"          borderColor: 'rgb(153, 102, 255)',",
											"          data: {{{dataset_x}}},",
											"        }]",
											"      };",
											"    ",
											"      const config = {",
											"        type: 'bar',",
											"        data: data,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'All Requests by timerange'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        data_second_chart = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'All Allowed Events count',",
											"          backgroundColor: 'rgb(75, 192, 192)',",
											"          borderColor: 'rgb(75, 192, 192)',",
											"          data: {{{dataset_x_allowed}}},",
											"          fill: true",
											"            },{",
											"          label: 'All Blocked Events count',",
											"          backgroundColor: 'rgb(255, 99, 132)',",
											"          borderColor: 'rgb(255, 99, 132)',",
											"          data: {{{dataset_x_blocked}}},",
											"          fill: true",
											"            }]",
											"        };",
											"        config_second_chart = {",
											"        type: 'bar',",
											"        data: data_second_chart,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'DNS Requests by timerange Allowed vs. Blocked'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        const myChart = new Chart(",
											"        document.getElementById('myChart'),",
											"        config",
											"      );",
											"      const myChartSecond = new Chart(",
											"        document.getElementById('myChartSecond'),",
											"        config_second_chart",
											"      );",
											"    </script>",
											" `;",
											"",
											"// Host checks for nested API endpoints and makes them copyable-on-click",
											"// const host = pm.request.url.host.join(\".\");",
											"const response = pm.response.json();",
											"// console.log(response)",
											"/* DATA PARSING */",
											"function parseData(response) {",
											"    // console.log(\"response goes here:\",response)",
											"    let headers_y = response.data.map( item => item.date + '.' + item.time)",
											"    let dataset_x = response.data.map( item => item.count)",
											"    let dataset_x_allowed = response.data.map( item => item.counts.allowedrequests)",
											"    let dataset_x_blocked = response.data.map( item => item.counts.blockedrequests)",
											"    // console.log(headers_Identities)",
											"    // console.log(dataset_allowed)",
											"  return [headers_y, dataset_x, dataset_x_allowed, dataset_x_blocked]",
											"}",
											"",
											"/* FEED DATA INTO TEMPLATE */",
											"pm.visualizer.set(template, {",
											"  // Template will receive stringified JSON",
											"  headers_y: JSON.stringify(parseData(response)[0]),",
											"  dataset_x: JSON.stringify(parseData(response)[1]),",
											"  dataset_x_allowed: JSON.stringify(parseData(response)[2]),",
											"  dataset_x_blocked: JSON.stringify(parseData(response)[3]),",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/requests-by-hour?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"requests-by-hour"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Requests by Hour DNS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */",
											"var template = `",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">",
											"    <div>",
											"        <div>",
											"            <canvas id=\"myChart\"></canvas>",
											"        </div>",
											"        <div>",
											"            <canvas id=\"myChartSecond\"></canvas>",
											"        </div>",
											"    </div>",
											"    <script>",
											"      const labels = {{{headers_y}}};",
											"      console.log('dataset_count = ', labels)",
											"      const data = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Events count',",
											"          backgroundColor: 'rgb(153, 102, 255)',",
											"          borderColor: 'rgb(153, 102, 255)',",
											"          data: {{{dataset_x}}},",
											"        }]",
											"      };",
											"    ",
											"      const config = {",
											"        type: 'bar',",
											"        data: data,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'DNS Requests by timerange'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        data_second_chart = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Allowed Events count',",
											"          backgroundColor: 'rgb(75, 192, 192)',",
											"          borderColor: 'rgb(75, 192, 192)',",
											"          data: {{{dataset_x_allowed}}},",
											"          fill: true",
											"            },{",
											"          label: 'Blocked Events count',",
											"          backgroundColor: 'rgb(255, 99, 132)',",
											"          borderColor: 'rgb(255, 99, 132)',",
											"          data: {{{dataset_x_blocked}}},",
											"          fill: true",
											"            }]",
											"        };",
											"        config_second_chart = {",
											"        type: 'bar',",
											"        data: data_second_chart,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'DNS Requests by timerange Allowed vs. Blocked'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        const myChart = new Chart(",
											"        document.getElementById('myChart'),",
											"        config",
											"      );",
											"      const myChartSecond = new Chart(",
											"        document.getElementById('myChartSecond'),",
											"        config_second_chart",
											"      );",
											"    </script>",
											" `;",
											"",
											"// Host checks for nested API endpoints and makes them copyable-on-click",
											"// const host = pm.request.url.host.join(\".\");",
											"const response = pm.response.json();",
											"// console.log(response)",
											"/* DATA PARSING */",
											"function parseData(response) {",
											"    // console.log(\"response goes here:\",response)",
											"    let headers_y = response.data.map( item => item.date + '.' + item.time)",
											"    let dataset_x = response.data.map( item => item.count)",
											"    let dataset_x_allowed = response.data.map( item => item.counts.allowedrequests)",
											"    let dataset_x_blocked = response.data.map( item => item.counts.blockedrequests)",
											"    // console.log(headers_Identities)",
											"    // console.log(dataset_allowed)",
											"  return [headers_y, dataset_x, dataset_x_allowed, dataset_x_blocked]",
											"}",
											"",
											"/* FEED DATA INTO TEMPLATE */",
											"pm.visualizer.set(template, {",
											"  // Template will receive stringified JSON",
											"  headers_y: JSON.stringify(parseData(response)[0]),",
											"  dataset_x: JSON.stringify(parseData(response)[1]),",
											"  dataset_x_allowed: JSON.stringify(parseData(response)[2]),",
											"  dataset_x_blocked: JSON.stringify(parseData(response)[3]),",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/requests-by-hour/dns?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"requests-by-hour",
										"dns"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Requests by Hour  proxy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */",
											"var template = `",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">",
											"    <div>",
											"        <div>",
											"            <canvas id=\"myChart\"></canvas>",
											"        </div>",
											"        <div>",
											"            <canvas id=\"myChartSecond\"></canvas>",
											"        </div>",
											"    </div>",
											"    <script>",
											"      const labels = {{{headers_y}}};",
											"      console.log('dataset_count = ', labels)",
											"      const data = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Events count',",
											"          backgroundColor: 'rgb(153, 102, 255)',",
											"          borderColor: 'rgb(153, 102, 255)',",
											"          data: {{{dataset_x}}},",
											"        }]",
											"      };",
											"    ",
											"      const config = {",
											"        type: 'bar',",
											"        data: data,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'Proxy Requests by timerange'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        data_second_chart = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Proxy Allowed Events count',",
											"          backgroundColor: 'rgb(75, 192, 192)',",
											"          borderColor: 'rgb(75, 192, 192)',",
											"          data: {{{dataset_x_allowed}}},",
											"          fill: true",
											"            },{",
											"          label: 'Proxy Blocked Events count',",
											"          backgroundColor: 'rgb(255, 99, 132)',",
											"          borderColor: 'rgb(255, 99, 132)',",
											"          data: {{{dataset_x_blocked}}},",
											"          fill: true",
											"            }]",
											"        };",
											"        config_second_chart = {",
											"        type: 'bar',",
											"        data: data_second_chart,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'Proxy Requests by timerange Allowed vs. Blocked'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        const myChart = new Chart(",
											"        document.getElementById('myChart'),",
											"        config",
											"      );",
											"      const myChartSecond = new Chart(",
											"        document.getElementById('myChartSecond'),",
											"        config_second_chart",
											"      );",
											"    </script>",
											" `;",
											"",
											"// Host checks for nested API endpoints and makes them copyable-on-click",
											"// const host = pm.request.url.host.join(\".\");",
											"const response = pm.response.json();",
											"// console.log(response)",
											"/* DATA PARSING */",
											"function parseData(response) {",
											"    // console.log(\"response goes here:\",response)",
											"    let headers_y = response.data.map( item => item.date + '.' + item.time)",
											"    let dataset_x = response.data.map( item => item.count)",
											"    let dataset_x_allowed = response.data.map( item => item.counts.allowedrequests)",
											"    let dataset_x_blocked = response.data.map( item => item.counts.blockedrequests)",
											"    // console.log(headers_Identities)",
											"    // console.log(dataset_allowed)",
											"  return [headers_y, dataset_x, dataset_x_allowed, dataset_x_blocked]",
											"}",
											"",
											"/* FEED DATA INTO TEMPLATE */",
											"pm.visualizer.set(template, {",
											"  // Template will receive stringified JSON",
											"  headers_y: JSON.stringify(parseData(response)[0]),",
											"  dataset_x: JSON.stringify(parseData(response)[1]),",
											"  dataset_x_allowed: JSON.stringify(parseData(response)[2]),",
											"  dataset_x_blocked: JSON.stringify(parseData(response)[3]),",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/requests-by-hour/proxy?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"requests-by-hour",
										"proxy"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Requests by Hour  firewall",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */",
											"var template = `",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">",
											"    <div>",
											"        <div>",
											"            <canvas id=\"myChart\"></canvas>",
											"        </div>",
											"        <div>",
											"            <canvas id=\"myChartSecond\"></canvas>",
											"        </div>",
											"    </div>",
											"    <script>",
											"      const labels = {{{headers_y}}};",
											"      console.log('dataset_count = ', labels)",
											"      const data = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Events count',",
											"          backgroundColor: 'rgb(153, 102, 255)',",
											"          borderColor: 'rgb(153, 102, 255)',",
											"          data: {{{dataset_x}}},",
											"        }]",
											"      };",
											"    ",
											"      const config = {",
											"        type: 'bar',",
											"        data: data,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'Firewall Requests by timerange'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        data_second_chart = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Allowed Events count',",
											"          backgroundColor: 'rgb(75, 192, 192)',",
											"          borderColor: 'rgb(75, 192, 192)',",
											"          data: {{{dataset_x_allowed}}},",
											"          fill: true",
											"            },{",
											"          label: 'Blocked Events count',",
											"          backgroundColor: 'rgb(255, 99, 132)',",
											"          borderColor: 'rgb(255, 99, 132)',",
											"          data: {{{dataset_x_blocked}}},",
											"          fill: true",
											"            }]",
											"        };",
											"        config_second_chart = {",
											"        type: 'bar',",
											"        data: data_second_chart,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'Firewall Requests by timerange Allowed vs. Blocked'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        const myChart = new Chart(",
											"        document.getElementById('myChart'),",
											"        config",
											"      );",
											"      const myChartSecond = new Chart(",
											"        document.getElementById('myChartSecond'),",
											"        config_second_chart",
											"      );",
											"    </script>",
											" `;",
											"",
											"// Host checks for nested API endpoints and makes them copyable-on-click",
											"// const host = pm.request.url.host.join(\".\");",
											"const response = pm.response.json();",
											"// console.log(response)",
											"/* DATA PARSING */",
											"function parseData(response) {",
											"    // console.log(\"response goes here:\",response)",
											"    let headers_y = response.data.map( item => item.date + '.' + item.time)",
											"    let dataset_x = response.data.map( item => item.count)",
											"    let dataset_x_allowed = response.data.map( item => item.counts.allowedrequests)",
											"    let dataset_x_blocked = response.data.map( item => item.counts.blockedrequests)",
											"    // console.log(headers_Identities)",
											"    // console.log(dataset_allowed)",
											"  return [headers_y, dataset_x, dataset_x_allowed, dataset_x_blocked]",
											"}",
											"",
											"/* FEED DATA INTO TEMPLATE */",
											"pm.visualizer.set(template, {",
											"  // Template will receive stringified JSON",
											"  headers_y: JSON.stringify(parseData(response)[0]),",
											"  dataset_x: JSON.stringify(parseData(response)[1]),",
											"  dataset_x_allowed: JSON.stringify(parseData(response)[2]),",
											"  dataset_x_blocked: JSON.stringify(parseData(response)[3]),",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/requests-by-hour/firewall?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"requests-by-hour",
										"firewall"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9. Organization Requests by Timerange",
					"item": [
						{
							"name": "Requests by timerange (ALL)",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									},
									{
										"key": "timerange",
										"value": "day",
										"type": "text"
									},
									{
										"key": "x-traffic-type",
										"value": "dns,proxy",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/requests-by-timerange?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"requests-by-timerange"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Requests by timerange DNS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */",
											"var template = `",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">",
											"    <div>",
											"        <div>",
											"            <canvas id=\"myChart\"></canvas>",
											"        </div>",
											"        <div>",
											"            <canvas id=\"myChartSecond\"></canvas>",
											"        </div>",
											"    </div>",
											"    <script>",
											"      const labels = {{{headers_y}}};",
											"      console.log('dataset_count = ', labels)",
											"      const data = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Events count',",
											"          backgroundColor: 'rgb(153, 102, 255)',",
											"          borderColor: 'rgb(153, 102, 255)',",
											"          data: {{{dataset_x}}},",
											"        }]",
											"      };",
											"    ",
											"      const config = {",
											"        type: 'bar',",
											"        data: data,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'DNS Requests by timerange'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        data_second_chart = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Allowed Events count',",
											"          backgroundColor: 'rgb(75, 192, 192)',",
											"          borderColor: 'rgb(75, 192, 192)',",
											"          data: {{{dataset_x_allowed}}},",
											"          fill: true",
											"            },{",
											"          label: 'Blocked Events count',",
											"          backgroundColor: 'rgb(255, 99, 132)',",
											"        //   borderColor: 'rgb(255, 99, 132)',",
											"          data: {{{dataset_x_blocked}}},",
											"          fill: true",
											"            }]",
											"        };",
											"        config_second_chart = {",
											"        type: 'bar',",
											"        data: data_second_chart,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'DNS Requests by timerange Allowed vs. Blocked'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        const myChart = new Chart(",
											"        document.getElementById('myChart'),",
											"        config",
											"      );",
											"      const myChartSecond = new Chart(",
											"        document.getElementById('myChartSecond'),",
											"        config_second_chart",
											"      );",
											"    </script>",
											" `;",
											"",
											"// Host checks for nested API endpoints and makes them copyable-on-click",
											"// const host = pm.request.url.host.join(\".\");",
											"const response = pm.response.json();",
											"// console.log(response)",
											"/* DATA PARSING */",
											"function parseData(response) {",
											"    // console.log(\"response goes here:\",response)",
											"    let headers_y = response.data.map( item => item.date + '.' + item.time)",
											"    let dataset_x = response.data.map( item => item.count)",
											"    let dataset_x_allowed = response.data.map( item => item.counts.allowedrequests)",
											"    let dataset_x_blocked = response.data.map( item => item.counts.blockedrequests)",
											"    // console.log(headers_Identities)",
											"    // console.log(dataset_allowed)",
											"  return [headers_y, dataset_x, dataset_x_allowed, dataset_x_blocked]",
											"}",
											"",
											"/* FEED DATA INTO TEMPLATE */",
											"pm.visualizer.set(template, {",
											"  // Template will receive stringified JSON",
											"  headers_y: JSON.stringify(parseData(response)[0]),",
											"  dataset_x: JSON.stringify(parseData(response)[1]),",
											"  dataset_x_allowed: JSON.stringify(parseData(response)[2]),",
											"  dataset_x_blocked: JSON.stringify(parseData(response)[3]),",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									},
									{
										"key": "timerange",
										"value": "hour",
										"type": "text"
									},
									{
										"key": "x-traffic-type",
										"value": "proxy",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/requests-by-timerange/dns?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=10&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"requests-by-timerange",
										"dns"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "domains",
											"value": "surfsharkstatus.com",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Requests by timerange  proxy",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									},
									{
										"key": "timerange",
										"value": "day",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/requests-by-timerange/proxy?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"requests-by-timerange",
										"proxy"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Requests by timerange  firewall",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									},
									{
										"key": "timerange",
										"value": "day",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/requests-by-timerange/firewall?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"requests-by-timerange",
										"firewall"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Requests by Hour  timerange",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/requests-by-timerange/firewall?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"requests-by-timerange",
										"firewall"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "**Description:***Gets activity volume within timeframe*"
				},
				{
					"name": "10.a. Organization Requests by Hour and Category",
					"item": [
						{
							"name": "Requests by Hour and Category (ALL)",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/categories-by-hour?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=10&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"categories-by-hour"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Requests by Hour and Category DNS",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/categories-by-hour/dns?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=2&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"categories-by-hour",
										"dns"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "2"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Requests by Hour and Category  proxy",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/categories-by-hour/proxy?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"categories-by-hour",
										"proxy"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Broken Requests by Hour and Category Firewall",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/categories-by-hour/firewall?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"categories-by-hour",
										"firewall"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "**Description:***Gets activity volume within timeframe*"
				},
				{
					"name": "10.b. Organization Categories by Hour and Category Copy",
					"item": [
						{
							"name": "Categories by timerange and Category (ALL)",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									},
									{
										"key": "timerange",
										"value": "day",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/categories-by-timerange?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=10&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"categories-by-timerange"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Categories  by timerange and Category DNS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"// console.log(response)\r",
											"/* DATA PARSING */\r",
											"function parseData(response) {\r",
											"    console.log('response = ', response)\r",
											"    let timeStamps = response.data.map(item => {return {\r",
											"    'label': item.date + '.' + item.time\r",
											"    }})\r",
											"    console.log('timeStamps = ', timeStamps)\r",
											"    filtered_content_data = response.data.map(item => {\r",
											"            return item.counts.filter( subItem => subItem.category.type === 'content')\r",
											"        })\r",
											"    all_types = []\r",
											"    filtered_content_data.forEach(item => item.forEach(subItem => (!all_types.includes(subItem.category.label))?all_types.push(subItem.category.label):'already exists, not adding!'))\r",
											"    // console.log('all_types = ', all_types)\r",
											"    // console.log('timeStamps = ', timeStamps)\r",
											"    //if a given type exists in a day filter it, if not add 0 value\r",
											"    superSeries = []\r",
											"    function contentChecker(dataObj,typeToFilter) {\r",
											"    let checkerResult = dataObj.counts.filter(countsItem => countsItem.category.label.includes(typeToFilter))\r",
											"    let finalResult = (checkerResult.length)?{\"value\":checkerResult[0].requests}:{\"value\":0}\r",
											"    \r",
											"    return finalResult\r",
											"    }\r",
											"\r",
											"    all_types.forEach(typeItem => {\r",
											"    superSeries.push({\r",
											"        \"seriesname\":typeItem,\r",
											"        \"data\": response.data.map(dataObj => {\r",
											"        return ((contentChecker(dataObj,typeItem)))\r",
											"    })\r",
											"    })\r",
											"    })\r",
											"    console.log('superSeries =', superSeries)\r",
											"}\r",
											"let result = parseData(response)\r",
											"// console.log('result =', result)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									},
									{
										"key": "timerange",
										"value": "hour",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/categories-by-timerange/dns?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=500&offset=0&categories=65,62,110,86,60,106,108,109,150,61,64,66,68,96,67,63",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"categories-by-timerange",
										"dns"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "500"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "categories",
											"value": "65,62,110,86,60,106,108,109,150,61,64,66,68,96,67,63"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Categories by timerange and Category  proxy",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									},
									{
										"key": "timerange",
										"value": "day",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/categories-by-timerange/proxy?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=0&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"categories-by-timerange",
										"proxy"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "0"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Broken Requests by timerange and Category Firewall",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									},
									{
										"key": "timerange",
										"value": "day",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/categories-by-timerange/firewall?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"categories-by-timerange",
										"firewall"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "**Description:***Gets activity volume within timeframe*"
				},
				{
					"name": "11. Deployment Status",
					"item": [
						{
							"name": "Deployment Status",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/deployment-status?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"",
										"deployment-status"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "**Description:***Gets activity volume within timeframe*"
				},
				{
					"name": "12. Bandwidth by Time",
					"item": [
						{
							"name": "Bandwidth by Hour (All)",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/bandwidth-by-hour?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"bandwidth-by-hour"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bandwidth by Timerange (All)",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									},
									{
										"key": "timerange",
										"value": "day",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/bandwidth-by-timerange?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"bandwidth-by-timerange"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "**Description:***Gets activity volume within timeframe*"
				},
				{
					"name": "13. Top Files (Proxy)",
					"item": [
						{
							"name": "Top Files (Proxy)",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-files?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"",
										"top-files"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "**Description:***Gets activity volume within timeframe*"
				},
				{
					"name": "14. Total Requests",
					"item": [
						{
							"name": "Total Requests (All)",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/total-requests?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"total-requests"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Total Requests DNS",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/total-requests/dns?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"total-requests",
										"dns"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Total Requests proxy",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/total-requests/proxy?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"total-requests",
										"proxy"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Total Requests firewall",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/total-requests/firewall?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"total-requests",
										"firewall"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "**Description:***Gets activity volume within timeframe*"
				},
				{
					"name": "15. Top Threats",
					"item": [
						{
							"name": "Top Threats (All)",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-threats?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-threats"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Top Threats DNS",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-threats/dns?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-threats",
										"dns"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Top Threats proxy",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-threats/proxy?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-threats",
										"proxy"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Broken Top Threats firewall",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-threats/firewall?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-threats",
										"firewall"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "**Description:***Gets activity volume within timeframe*"
				},
				{
					"name": "16. Top Threat Types",
					"item": [
						{
							"name": "Top Threat Types (All)",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-threat-types?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-threat-types"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Top Threat Types DNS",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-threat-types/dns?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-threat-types",
										"dns"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Top Threat Types proxy",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-threat-types/proxy?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-threat-types",
										"proxy"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Broken Top Threats firewall",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-threat-types/firewall?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-threat-types",
										"firewall"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "**Description:***Gets activity volume within timeframe*"
				},
				{
					"name": "17. Utility",
					"item": [
						{
							"name": "Applications",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/applications?limit=100&offset=0&identitytypes=roaming",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"applications"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "roaming"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Categories",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/categories",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										},
										{
											"key": "identitytypes",
											"value": "roaming",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identities",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=roaming",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "roaming"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity by ID",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=network_device",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "virtual_appliance",
											"disabled": true
										},
										{
											"key": "identitytypes",
											"value": "on_network",
											"disabled": true
										},
										{
											"key": "identitytypes",
											"value": "ad_connector",
											"disabled": true
										},
										{
											"key": "identitytypes",
											"value": "vpn",
											"disabled": true
										},
										{
											"key": "identitytypes",
											"value": "connected_devices",
											"disabled": true
										},
										{
											"key": "identitytypes",
											"value": "network_device"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity Roaming",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=roaming",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "roaming"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity Roaming AC",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=anyconnect",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "anyconnect"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity Networks",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=network",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "network"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity internal_network",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=internal_network",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "internal_network"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity tunnel_device",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=tunnel_device",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "tunnel_device"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity directory_domain",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=directory_domain",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "directory_domain"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity directory_group",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=directory_group",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "directory_group"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity network_device",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=network_device",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "network_device"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Threat Types",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/threat-types",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"threat-types"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										},
										{
											"key": "identitytypes",
											"value": "roaming",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Threat Type by name",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/threat-types/Ransomware",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"threat-types",
										"Ransomware"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										},
										{
											"key": "identitytypes",
											"value": "roaming",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Threat Names",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/threat-names",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"threat-names"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										},
										{
											"key": "identitytypes",
											"value": "roaming",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Threat Name by ID",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/threat-names/guloader",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"threat-names",
										"guloader"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										},
										{
											"key": "identitytypes",
											"value": "roaming",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mobile Devices",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=mobile_device,android",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "mobile_device,android"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AD Users",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=directory_user",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "directory_user"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deployment Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */",
											"var template = `",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">",
											"<div>",
											"  <canvas id=\"myChart\"></canvas>",
											"</div>",
											"    <script>",
											"      const labels = {{{headers_Identities}}};",
											"      console.log('headers_Identities = ', labels)",
											"      const data = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Inactive Count',",
											"          backgroundColor: 'rgb(255, 99, 132)',",
											"          borderColor: 'rgb(255, 99, 132)',",
											"          data: {{{dataset_inactive_count}}},",
											"        },{",
											"          label: 'Active Count',",
											"          backgroundColor: 'rgb(153, 102, 255)',",
											"          borderColor: 'rgb(153, 102, 255)',",
											"          data: {{{dataset_active_count}}},",
											"        }]",
											"      };",
											"    ",
											"      const config = {",
											"        type: 'bar',",
											"        data: data,",
											"        options: {",
											"            plugins: {",
											"            title: {",
											"                display: true,",
											"                text: 'Umbrella Demployment Status'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        const myChart = new Chart(",
											"        document.getElementById('myChart'),",
											"        config",
											"      );",
											"    </script>",
											" `;",
											"",
											"// Host checks for nested API endpoints and makes them copyable-on-click",
											"// const host = pm.request.url.host.join(\".\");",
											"const response = pm.response.json();",
											"// console.log(response)",
											"/* DATA PARSING */",
											"function parseData(response) {",
											"    // console.log(\"response goes here:\",response)",
											"    let headers_Identities = response.data.map( item => item.type.label)",
											"    let dataset_inactive_count = response.data.map( item => item.count - item.activecount)",
											"    let dataset_active_count = response.data.map( item => item.activecount)",
											"    // console.log(headers_Identities)",
											"    // console.log(dataset_allowed)",
											"    // console.log(dataset_blocked)",
											"  ",
											"  return [headers_Identities, dataset_inactive_count, dataset_active_count]",
											"}",
											"",
											"/* FEED DATA INTO TEMPLATE */",
											"pm.visualizer.set(template, {",
											"  // Template will receive stringified JSON",
											"  headers_Identities: JSON.stringify(parseData(response)[0]),",
											"  dataset_inactive_count: JSON.stringify(parseData(response)[1]),",
											"  dataset_active_count: JSON.stringify(parseData(response)[2])",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/deployment-status",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"deployment-status"
									],
									"query": [
										{
											"key": "limit",
											"value": "100",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										},
										{
											"key": "from",
											"value": "{{fromTimestamp}}",
											"disabled": true
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "17. Top Internal IPs",
					"item": [
						{
							"name": "Top Internal IPs",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-ips/internal?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-ips",
										"internal"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "**Description:***Gets activity volume within timeframe*"
				},
				{
					"name": "18. Summary",
					"item": [
						{
							"name": "Summary (All)",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/summary?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"summary"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Summary DNS",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/summary/dns?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"summary",
										"dns"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Summary proxy",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/summary/proxy?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"summary",
										"proxy"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Summary firewall",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/summary/firewall?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"summary",
										"firewall"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "**Description:***Gets activity volume within timeframe*"
				},
				{
					"name": "19. Summaries by Category",
					"item": [
						{
							"name": "Summaries by category (All)",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/summaries-by-category?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"summaries-by-category"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Summaries by category DNS",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/summaries-by-category/dns?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"summaries-by-category",
										"dns"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Summaries by category  proxy",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/summaries-by-category/proxy?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"summaries-by-category",
										"proxy"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Broken Summaries by category firewall",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/summaries-by-category/firewall?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"summaries-by-category",
										"firewall"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "**Description:***Gets activity volume within timeframe*"
				},
				{
					"name": "20. Summaries by Destination",
					"item": [
						{
							"name": "Summaries by destination (All)",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/summaries-by-destination?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"summaries-by-destination"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Summaries by destination DNS",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/summaries-by-destination/dns?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"summaries-by-destination",
										"dns"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Summaries by destination  proxy",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/summaries-by-destination/proxy?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"summaries-by-destination",
										"proxy"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Broken Summaries by destination firewall",
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/summaries-by-destination/firewall?from={{fromTimestamp}}&to={{untilTimestamp}}&limit=100&offset=0",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"summaries-by-destination",
										"firewall"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromTimestamp}}"
										},
										{
											"key": "to",
											"value": "{{untilTimestamp}}"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "**Description:***Gets activity volume within timeframe*"
				},
				{
					"name": "Deployment_Custom_status",
					"item": [
						{
							"name": "Refresh Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"console.log('access_token = ', jsonData.access_token)",
											"var fromTimeConverted = new Date('June 8, 2022 01:00:00').getTime()",
											"var untilTimeConverted = new Date('June 9, 2022 01:00:00').getTime()",
											"postman.setEnvironmentVariable(\"fromTimestamp\", fromTimeConverted);",
											"postman.setEnvironmentVariable(\"untilTimestamp\", untilTimeConverted);",
											"console.log('fromTimeConverted =', fromTimeConverted)",
											"console.log('fromTimeConverted =', untilTimeConverted)",
											"postman.setEnvironmentVariable(\"AccessToken\", jsonData.access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{AuthAPIToken}}"
									}
								],
								"url": {
									"raw": "{{Authurl}}",
									"host": [
										"{{Authurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity Roaming",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"console.log('data list length = ', jsonData.data.length);\r",
											"    (jsonData.data.length)?postman.setEnvironmentVariable(\"roaming\", JSON.stringify({\r",
											"        \"type\":\"roaming\",\r",
											"        \"elements\": jsonData.data.map(item => item.label)\r",
											"    })):postman.setEnvironmentVariable(\"roaming\", JSON.stringify({\r",
											"        \"type\":\"roaming\",\r",
											"        \"elements\": []\r",
											"    }));\r",
											"// var fromTimeConverted = new Date('June 8, 2022 01:00:00').getTime()\r",
											"// var untilTimeConverted = new Date('June 9, 2022 01:00:00').getTime()\r",
											"// postman.setEnvironmentVariable(\"fromTimestamp\", fromTimeConverted);\r",
											"// postman.setEnvironmentVariable(\"untilTimestamp\", untilTimeConverted);\r",
											"// console.log('fromTimeConverted =', fromTimeConverted)\r",
											"// console.log('fromTimeConverted =', untilTimeConverted)\r",
											"// postman.setEnvironmentVariable(\"AccessToken\", jsonData.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=roaming",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "roaming"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity anyconnect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"console.log('data list length = ', jsonData.data.length);\r",
											"    (jsonData.data.length)?postman.setEnvironmentVariable(\"anyconnect\", JSON.stringify({\r",
											"        \"type\":\"anyconnect\",\r",
											"        \"elements\": jsonData.data.map(item => item.label)\r",
											"    })):postman.setEnvironmentVariable(\"anyconnect\", JSON.stringify({\r",
											"        \"type\":\"anyconnect\",\r",
											"        \"elements\": []\r",
											"    }));\r",
											"// var fromTimeConverted = new Date('June 8, 2022 01:00:00').getTime()\r",
											"// var untilTimeConverted = new Date('June 9, 2022 01:00:00').getTime()\r",
											"// postman.setEnvironmentVariable(\"fromTimestamp\", fromTimeConverted);\r",
											"// postman.setEnvironmentVariable(\"untilTimestamp\", untilTimeConverted);\r",
											"// console.log('fromTimeConverted =', fromTimeConverted)\r",
											"// console.log('fromTimeConverted =', untilTimeConverted)\r",
											"// postman.setEnvironmentVariable(\"AccessToken\", jsonData.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=anyconnect",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "anyconnect"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity Networks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"console.log('data list length = ', jsonData.data.length);\r",
											"    (jsonData.data.length)?postman.setEnvironmentVariable(\"network\", JSON.stringify({\r",
											"        \"type\":\"network\",\r",
											"        \"elements\": jsonData.data.map(item => item.label)\r",
											"    })):postman.setEnvironmentVariable(\"network\", JSON.stringify({\r",
											"        \"type\":\"network\",\r",
											"        \"elements\": []\r",
											"    }));\r",
											"\r",
											"// var roaming_var = postman.getEnvironmentVariable(\"roaming\");\r",
											"// console.log('roaming_var = ', JSON.parse(roaming_var))"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=network",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "network"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity tunnel_device",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"console.log('data list length = ', jsonData.data.length);\r",
											"    (jsonData.data.length)?postman.setEnvironmentVariable(\"tunnel_device\", JSON.stringify({\r",
											"        \"type\":\"tunnel_device\",\r",
											"        \"elements\": jsonData.data.map(item => item.label)\r",
											"    })):postman.setEnvironmentVariable(\"tunnel_device\", JSON.stringify({\r",
											"        \"type\":\"tunnel_device\",\r",
											"        \"elements\": []\r",
											"    }));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=tunnel_device",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "tunnel_device"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity network_device",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"console.log('data list length = ', jsonData.data.length);\r",
											"    (jsonData.data.length)?postman.setEnvironmentVariable(\"network_device\", JSON.stringify({\r",
											"        \"type\":\"network_device\",\r",
											"        \"elements\": jsonData.data.map(item => item.label)\r",
											"    })):postman.setEnvironmentVariable(\"network_device\", JSON.stringify({\r",
											"        \"type\":\"network_device\",\r",
											"        \"elements\": []\r",
											"    }));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/identities?limit=100&offset=0&identitytypes=network_device",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"identities"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "network_device"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Top Identities All",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/* VISUALIZATION TEMPLATE */",
											"var template = `",
											"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
											"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
											"",
											"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js\" integrity=\"sha512-sW/w8s4RWTdFFSduOTGtk4isV1+190E/GghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>",
											"<script src=\"https://unpkg.com/chart.js-plugin-labels-dv/dist/chartjs-plugin-labels.min.js\"></script>",
											"",
											"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">",
											"<div>",
											"    <div>",
											"    <canvas id=\"myChart\"></canvas>",
											"    </div>",
											"    <div class=\"container\">",
											"        <div class=\"chart1\">",
											"            <canvas id=\"myPie_roaming\"></canvas>",
											"        </div>",
											"        <div class=\"chart2\">",
											"            <canvas id=\"myPie_anyconnect\"></canvas>",
											"        </div>",
											"    </div>",
											"    <div class=\"container\">",
											"        <div class=\"chart1\">",
											"            <canvas id=\"myPie_network\"></canvas>",
											"        </div>",
											"        <div class=\"chart2\">",
											"            <canvas id=\"myPie_tunnel_device\"></canvas>",
											"        </div>",
											"    </div>",
											"    <div class=\"container\">",
											"        <div class=\"chart1\">",
											"            <canvas id=\"myPie_network_device\"></canvas>",
											"        </div>",
											"    </div>",
											"    <div>",
											"    ",
											"    </div>",
											"    ",
											"</div>",
											"<style>",
											".container {",
											"  display: flex;",
											"  width: 100%;",
											"//   height: 150px;",
											"}",
											"",
											".chart1,",
											".chart2 {",
											"  width: 50%;",
											"}",
											".chart3 {",
											"  width: 100%;",
											"}",
											"</style>",
											"    <script>",
											"      const labels = {{{headers_Identities}}};",
											"      console.log('headers_Identities = ', labels)",
											"      const data = {",
											"        labels: labels,",
											"        datasets: [{",
											"          label: 'Allowed Events',",
											"          backgroundColor: 'rgb(255, 99, 132)',",
											"          borderColor: 'rgb(255, 99, 132)',",
											"          data: {{{dataset_allowed}}},",
											"        },{",
											"          label: 'Blocked Events',",
											"          backgroundColor: 'rgb(153, 102, 255)',",
											"          borderColor: 'rgb(153, 102, 255)',",
											"          data: {{{dataset_blocked}}},",
											"        }]",
											"      };",
											"    ",
											"      const config = {",
											"        type: 'bar',",
											"        data: data,",
											"        options: {",
											"            plugins: {",
											"                labels:{",
											"                        render: (args) => {",
											"                            return \"\"",
											"                        }",
											"                        ",
											"                    },",
											"            title: {",
											"                display: true,",
											"                text: 'Allow vs. Blocked events per identities'",
											"            },",
											"            },",
											"            responsive: true,",
											"            scales: {",
											"            x: {",
											"                stacked: true,",
											"            },",
											"            y: {",
											"                stacked: true",
											"            }",
											"            }",
											"        }",
											"        };",
											"        const myChart = new Chart(",
											"        document.getElementById('myChart'),",
											"        config",
											"      );",
											"      let roaming_obj = {{{roaming_obj}}};",
											"      console.log('roaming_obj = ', roaming_obj)",
											"      const data_pie_roaming = {",
											"        labels: roaming_obj.labels_identity,",
											"        datasets: [{",
											"            data: roaming_obj.dataset_identity,",
											"            backgroundColor: [",
											"            'rgb(255, 99, 132)',",
											"            'rgb(54, 162, 235)',",
											"            ],",
											"            hoverOffset: 4",
											"        }]",
											"        };",
											"      const config_pie_roaming  = {",
											"        type: 'doughnut',",
											"        data: data_pie_roaming,",
											"        options: {",
											"                responsive: true,",
											"                plugins: {",
											"                labels:{",
											"                        render: (args) => {",
											"                            return args.label + \": \" + args.value",
											"                        }",
											"                        ",
											"                    },",
											"                legend: {",
											"                    position: 'top',",
											"                },",
											"                title: {",
											"                    display: true,",
											"                    text: roaming_obj.identity_type + \" identities\"",
											"                }",
											"                }",
											"            },",
											"        };",
											"      const myPie_roaming = new Chart(",
											"        document.getElementById('myPie_roaming'),",
											"        config_pie_roaming",
											"      );",
											"",
											"      let anyconnect_obj = {{{anyconnect_obj}}};",
											"      console.log('anyconnect_obj = ', anyconnect_obj)",
											"      const data_pie_anyconnect = {",
											"        labels: anyconnect_obj.labels_identity,",
											"        datasets: [{",
											"            data: anyconnect_obj.dataset_identity,",
											"            backgroundColor: [",
											"            'rgb(255, 99, 132)',",
											"            'rgb(54, 162, 235)',",
											"            ],",
											"            hoverOffset: 4",
											"        }]",
											"        };",
											"      const config_pie_anyconnect  = {",
											"        type: 'doughnut',",
											"        data: data_pie_anyconnect,",
											"        options: {",
											"                responsive: true,",
											"                plugins: {",
											"                labels:{",
											"                        render: (args) => {",
											"                            return args.label + \": \" + args.value",
											"                        }",
											"                        ",
											"                    },",
											"                legend: {",
											"                    position: 'top',",
											"                },",
											"                title: {",
											"                    display: true,",
											"                    text: anyconnect_obj.identity_type + \" identities\"",
											"                }",
											"                }",
											"            },",
											"        };",
											"      const myPie_anyconnect = new Chart(",
											"        document.getElementById('myPie_anyconnect'),",
											"        config_pie_anyconnect",
											"      );",
											"",
											"",
											"      let network_obj = {{{network_obj}}};",
											"      console.log('network_obj = ', network_obj)",
											"      const data_pie_network = {",
											"        labels: network_obj.labels_identity,",
											"        datasets: [{",
											"            data: network_obj.dataset_identity,",
											"            backgroundColor: [",
											"            'rgb(255, 99, 132)',",
											"            'rgb(54, 162, 235)',",
											"            ],",
											"            hoverOffset: 4",
											"        }]",
											"        };",
											"      const config_pie_network  = {",
											"        type: 'doughnut',",
											"        data: data_pie_network,",
											"        options: {",
											"                responsive: true,",
											"                plugins: {",
											"                labels:{",
											"                        render: (args) => {",
											"                            return args.label + \": \" + args.value",
											"                        }",
											"                        ",
											"                    },",
											"                legend: {",
											"                    position: 'top',",
											"                },",
											"                title: {",
											"                    display: true,",
											"                    text: network_obj.identity_type + \" identities\"",
											"                }",
											"                }",
											"            },",
											"        };",
											"      const myPie_network = new Chart(",
											"        document.getElementById('myPie_network'),",
											"        config_pie_network",
											"      );",
											"",
											"      let tunnel_device_obj = {{{tunnel_device_obj}}};",
											"      console.log('tunnel_device_obj = ', tunnel_device_obj)",
											"      const data_pie_tunnel_device = {",
											"        labels: tunnel_device_obj.labels_identity,",
											"        datasets: [{",
											"            data: tunnel_device_obj.dataset_identity,",
											"            backgroundColor: [",
											"            'rgb(255, 99, 132)',",
											"            'rgb(54, 162, 235)',",
											"            ],",
											"            hoverOffset: 4",
											"        }]",
											"        };",
											"      const config_pie_tunnel_device  = {",
											"        type: 'doughnut',",
											"        data: data_pie_tunnel_device,",
											"        options: {",
											"                responsive: true,",
											"                plugins: {",
											"                labels:{",
											"                        render: (args) => {",
											"                            return args.label + \": \" + args.value",
											"                        }",
											"                        ",
											"                    },",
											"                legend: {",
											"                    position: 'top',",
											"                },",
											"                title: {",
											"                    display: true,",
											"                    text: tunnel_device_obj.identity_type + \" identities\"",
											"                }",
											"                }",
											"            },",
											"        };",
											"      const myPie_tunnel_device = new Chart(",
											"        document.getElementById('myPie_tunnel_device'),",
											"        config_pie_tunnel_device",
											"      );",
											"",
											"      let network_device_obj = {{{network_device_obj}}};",
											"      console.log('network_device_obj = ', network_device_obj)",
											"      const data_pie_network_device = {",
											"        labels: network_device_obj.labels_identity,",
											"        datasets: [{",
											"            data: network_device_obj.dataset_identity,",
											"            backgroundColor: [",
											"            'rgb(255, 99, 132)',",
											"            'rgb(54, 162, 235)',",
											"            ],",
											"            hoverOffset: 4",
											"        }]",
											"        };",
											"      const config_pie_network_device  = {",
											"        type: 'doughnut',",
											"        data: data_pie_network_device,",
											"        options: {",
											"                    responsive: true,",
											"                    plugins: {",
											"                        labels:{",
											"                            render: (args) => {",
											"                                return args.label + \": \" + args.value",
											"                            }",
											"                            ",
											"                        },",
											"                        legend: {",
											"                            position: 'top',",
											"                        },",
											"                        title: {",
											"                            display: true,",
											"                            text: network_device_obj.identity_type + \" identities\"",
											"                        }",
											"                    }",
											"                },",
											"        };",
											"      const myPie_network_device = new Chart(",
											"        document.getElementById('myPie_network_device'),",
											"        config_pie_network_device",
											"      );",
											"    </script>",
											" `;",
											"",
											"// Host checks for nested API endpoints and makes them copyable-on-click",
											"// const host = pm.request.url.host.join(\".\");",
											"const response = pm.response.json();",
											"var roaming_var = JSON.parse(postman.getEnvironmentVariable(\"roaming\"));",
											"console.log('roaming_var = ', roaming_var)",
											"var anyconnect_var = JSON.parse(postman.getEnvironmentVariable(\"anyconnect\"));",
											"console.log('anyconnect_var = ', anyconnect_var)",
											"var network_var = JSON.parse(postman.getEnvironmentVariable(\"network\"));",
											"console.log('network_var = ', network_var)",
											"var tunnel_device_var = JSON.parse(postman.getEnvironmentVariable(\"tunnel_device\"));",
											"console.log('tunnel_device_var = ', tunnel_device_var)",
											"var network_device_var = JSON.parse(postman.getEnvironmentVariable(\"network_device\"));",
											"console.log('network_device_var = ', network_device_var)",
											"// console.log(response)",
											"/* DATA PARSING */",
											"function findActive(response,unit_data) {",
											"    // console.log(\"response goes here:\",response)",
											"    let identity_type = unit_data.type",
											"    let headers= [\"Active\",\"Inactive\"]",
											"    let count_overall = unit_data.elements.length",
											"    let count_active = 0;",
											"    response.data.forEach( item => (item.identity.type.type === identity_type)? count_active +=1:count_active)",
											"    let count_inactive = count_overall - count_active",
											"    console.log('count_overall = ', count_overall)",
											"    console.log('count_active = ', count_active)",
											"    console.log('count_inactive = ', count_inactive)",
											"    ",
											"    let dataset = [count_active, count_inactive]",
											"    ",
											"",
											"  return {",
											"      \"identity_type\":identity_type,",
											"      \"labels_identity\":headers,",
											"      \"dataset_identity\":[count_active, count_inactive]",
											"  }",
											"}",
											"function parseData(response) {",
											"    // console.log(\"response goes here:\",response)",
											"    let headers_Identities = response.data.map( item => item.identity.type.type + \" : \" + item.identity.label)",
											"    let dataset_allowed = response.data.map( item => item.counts.allowedrequests)",
											"    let dataset_blocked = response.data.map( item => item.counts.blockedrequests)",
											"    // console.log(headers_Identities)",
											"    // console.log(dataset_allowed)",
											"    // console.log(dataset_blocked)",
											"  ",
											"  return [headers_Identities, dataset_allowed, dataset_blocked]",
											"}",
											"",
											"/* FEED DATA INTO TEMPLATE */",
											"pm.visualizer.set(template, {",
											"  // Template will receive stringified JSON",
											"  headers_Identities: JSON.stringify(parseData(response)[0]),",
											"  dataset_allowed: JSON.stringify(parseData(response)[1]),",
											"  dataset_blocked: JSON.stringify(parseData(response)[2]),",
											"  roaming_obj: JSON.stringify(findActive(response,roaming_var)),",
											"  anyconnect_obj: JSON.stringify(findActive(response,anyconnect_var)),",
											"  network_obj: JSON.stringify(findActive(response,network_var)),",
											"  tunnel_device_obj: JSON.stringify(findActive(response,tunnel_device_var)),",
											"  network_device_obj: JSON.stringify(findActive(response,network_device_var)),",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AccessToken}}"
									}
								],
								"url": {
									"raw": "{{APIurl}}{{org_id}}/top-identities?from=-30days&to=now&limit=100&offset=0&identitytypes=roaming,anyconnect,network,tunnel_device,network_device",
									"host": [
										"{{APIurl}}{{org_id}}"
									],
									"path": [
										"top-identities"
									],
									"query": [
										{
											"key": "from",
											"value": "-30days"
										},
										{
											"key": "to",
											"value": "now"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "identitytypes",
											"value": "roaming,anyconnect,network,tunnel_device,network_device"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Top Internal IPs",
					"protocolProfileBehavior": {
						"followAuthorizationHeader": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AccessToken}}"
							}
						],
						"url": {
							"raw": "{{APIurl}}{{org_id}}/top-ips/internal?from=EnterTheFromDateInEpochMs&to=EnterTheToDateInEpochMs&limit=1&offset=0",
							"host": [
								"{{APIurl}}{{org_id}}"
							],
							"path": [
								"top-ips",
								"internal"
							],
							"query": [
								{
									"key": "from",
									"value": "EnterTheFromDateInEpochMs"
								},
								{
									"key": "to",
									"value": "EnterTheToDateInEpochMs"
								},
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Total Requests",
					"protocolProfileBehavior": {
						"followAuthorizationHeader": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AccessToken}}"
							}
						],
						"url": {
							"raw": "{{APIurl}}{{org_id}}/total-requests?from=EnterTheFromDateInEpochMs&to=EnterTheToDateInEpochMs&limit=1&offset=0",
							"host": [
								"{{APIurl}}{{org_id}}"
							],
							"path": [
								"total-requests"
							],
							"query": [
								{
									"key": "from",
									"value": "EnterTheFromDateInEpochMs"
								},
								{
									"key": "to",
									"value": "EnterTheToDateInEpochMs"
								},
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "First get your access token"
		},
		{
			"name": "Reporting_MSP_Deployment",
			"item": [
				{
					"name": "Deployment status providers",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AccessTokenMSP}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{APIurlMSP}}/providers/{{org_id_msp}}/deployments?from=-1day&to=now",
							"host": [
								"{{APIurlMSP}}"
							],
							"path": [
								"providers",
								"{{org_id_msp}}",
								"deployments"
							],
							"query": [
								{
									"key": "from",
									"value": "-1day"
								},
								{
									"key": "to",
									"value": "now"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Access Token MSP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"console.log('access_token = ', jsonData.access_token)",
									"var fromTimeConverted = new Date('June 6, 2022 01:00:00').getTime()",
									"var untilTimeConverted = new Date('July 5, 2022 01:00:00').getTime()",
									"postman.setEnvironmentVariable(\"fromTimestamp\", fromTimeConverted);",
									"postman.setEnvironmentVariable(\"untilTimestamp\", untilTimeConverted);",
									"console.log('fromTimeConverted =', fromTimeConverted)",
									"console.log('fromTimeConverted =', untilTimeConverted)",
									"postman.setEnvironmentVariable(\"AccessTokenMSP\", jsonData.access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ReportingSecret_msp}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ReportingKey_msp}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthAPIToken}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{Authurl}}",
							"host": [
								"{{Authurl}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "clientSecret",
				"value": "{{ReportingSecret}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{ReportingKey}}",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "{{Authurl}}",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "client_credentials",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}